function colours2 = colourconverter(colours0, col_space, dim, wp_xyY, mon_xyY, mon_ldt, mon_oog, mon_kwY, mon_rgbmax, cal_mode, msg)
% Converts input colours (see INPUT) to all kinds of other colour
% specifications (see OUTPUT). 
%
% INPUT -------------------------------------------------------------------
% - colours0 = Colour specifications you want to convert; default
%              coordinates of DKL axis. 
% - col_space = Colour space of your colours0; default DKL.
% - wp_xyY  = White-point for CIELUV and CIELAB conversions.
% - mon_xyY = Monitor luminance and chromaticities (xyY) for R,G, and B;
%             per default sRGB. 
% - mon_ldt = Monitor look-up (aka look-down) tables for gamma correction;
%             per default sRGB.
% - mon_oog = Monitor Out-Of-Gamut limits for linear RGBs; per default 0
%             and 255 (conservative, discouraged). 
% - mon_kwY = Monitor Black Screen luminance correction (discouraged).
% - mon_rgbmax = Monitor maximum RGB value; default = 255 (8 bit).
% - calmode = Calibration mode: 
%               1 = without bit loss (default); 
%               0 = old-schoold with bit loss (strongly discouraged).
% - msg     =  messages; 1 = on (default), 0 = off.
%
% OUTPUT ------------------------------------------------------------------
% Dataset colours2 consistes of variables for different types of colour
% specifications:
%   - rgb   = (gamma distributed) RGB values of the respective monitor.
%   - rgbl  = linear RGB values (i.e. after inverse gamma correction).
%   - oog   = Indices for values that are Out Of Gamut.
%   - XYZ   = Tristimulus values (X, Y = luminance, Z)
%   - xyY   = Chromaticity coordinates (x,y) and luminance (Y)
%   - dkl   = DKL coordinates with axes scaled so that circle of radius 1
%             is just within monitor gamut.
%   - Luv   = CIELUV (L*, u*, v*)
%   - Lab   = CIELAB (L*, a*, b*)
%
% GENEALOGY ---------------------------------------------------------------
% 2012.06.29 * [cw]
% 2016.07.01 changed and extended
% 2016.07.28 options
% 2016.10.12 corrected gamut_checker, remapped lRGBs to [0 1] to avoid unwarranted warning. [cw]
% 2016.11.07 corrected 255 scaling bug [cw]
% 2017.01.04 added dkl2rgb [cw]
% 2017.02.16 added lms [cw]
% 2017.04.21 changed wp default to mon [cw]
% 2017.07.04 corrected error with black for CIELUV [cw]
% 2017.11.02 added MacLeodBoynton [cw]
% 2017.12.20 fixed default wp for 10bit, i.e. replaced 255 by mon_rgbmax [cw]
% 2018.02.28 fixed bug for rgb input, i.e. replaced (more) 255 by mon_rgbmax [cw]
% 2018.03.29 added black luminance correction [cw]
% 2018.04.16 fixed dim bug with polar coordinates [cw]
% 2018.07.23 corrected xyY NaNs for black (Y == 0) [cw]
% 2018.11.15 added warnings for DKL bc of Judd corrections for XYZ [cw]
% 2018.11.27 added luv_pol and lab_pol input options [cw]
% 2018.12.17 default rgb_max based on ldt [cw]
% 2019.04.18 default if mon_xyY empty [cw]

%% DEFAULT INPUT
if nargin < 11
    msg = 0;
    if nargin < 10
        cal_mode = 1;
        if nargin < 9
            mon_rgbmax = [];
            if nargin < 8
                mon_kwY = [];
                if nargin < 7
                    mon_oog = [0 255; 0 255; 0 255];
                    if nargin < 6
                        [tmp, mon_ldt] = srgb;
                        if nargin < 5
                            mon_xyY = tmp;
                            if nargin < 4
                                wp_xyY = [];
                                if nargin < 3
                                    dim = 2;
                                    if nargin < 2
                                        col_space = 'dkl';
                                        if nargin == 0
                                            colours0 = [-1 0 0; 0 0 0; 1 0 0; 0 -1 0; 0 1 0; 0 0 -1; 0 0 1];
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end


% DEFAULT FOR MON_XYY (if empty) ------------------------------------------
if isempty(mon_xyY)
     mon_xyY = srgb;
end

% BLACKLIGHT CORRECTION FOR MONITOR MATRIX --------------------------------
if ~isempty(mon_kwY)
    mon_xyY(:,3) = mon_xyY(:,3)-mon_kwY(1);
    if msg
        fprintf('KY1: Black luminance substracted from mon_xyY (step 1/3)\n');
    end
end

if isempty(wp_xyY) % To allow for default use when monitor is specified
%     wp_xyY = [0.31271, 0.32902, 100];
%     wp_xyY = XYZ2xyY(rgb2XYZ([1,1,1], mon_xyY,2, mon_kwY));
    wp_xyY = 'mon';
    warning('No white-point was provided, monitor white-point has been used.');
end

if ischar(wp_xyY)
    switch wp_xyY
        case 'd65'
            wp_xyY = [0.31271, 0.32902, 100];
        case 'mon'
            wp_xyY = XYZ2xyY(rgb2XYZ([1,1,1], mon_xyY,2, mon_kwY));
        case 'halfmon'
            wp_xyY = XYZ2xyY(rgb2XYZ([1,1,1], mon_xyY,2, mon_kwY));
            wp_xyY(3) = wp_xyY(3)/2;
    end
end

if isempty(mon_ldt)
     [~, mon_ldt] = srgb;
end

if isempty(mon_rgbmax)
    mon_rgbmax = unique(mon_ldt(end,:));
    if numel(mon_rgbmax) > 1
        error('mon_rgbmax is ill-defined!');
    end
end

if isempty(mon_oog)
     mon_oog = [0 mon_rgbmax; 0 mon_rgbmax; 0 mon_rgbmax];
end

%% CONVERSION TO XYZ
initmon(mon_xyY(1:3,:), msg);
rgb = []; 
rgbl = []; 
XYZ = [];
xyY = []; 
Luv = [];
Lab = [];
dkl = [];
hsv = [];

switch lower(col_space)
    case {'luv_pol', 'lab_pol'}
        if dim == 2
            [x,y] = pol2cart(deg2rad(colours0(:,2)),colours0(:,3));
            colours0 = [colours0(:,1), x,y];
        elseif dim == 3
            [x,y] = pol2cart(deg2rad(colours0(:,:,2)),colours0(:,:,3));
            colours0 = cat(3,colours0(:,:,1), x,y);
        end
end

switch lower(col_space)
    case 'rgb'
        rgb = colours0; 
        rgbl = gammainvcorrector(rgb, mon_ldt, dim, mon_rgbmax);
    case 'rgbl'
        rgbl = colours0; 
    case 'xyy'
        xyY = colours0;
        XYZ = xyY2XYZ(xyY,dim);
    case 'xyz'
        XYZ = colours0;
    case {'dkl', 'dkl_cart'}
        dkl = colours0;
        rgbl = dklcart2rgb(colours0, dim)*mon_rgbmax;
        if dim == 2
            rgbl = rgbl';
        end
        if msg
            fprintf('WARNING: DKL produces Judd corrected xyY\n');
        end
    case 'dkl_pol'
        rgbl = dkl2rgb(colours0(:,1), colours0(:,2), colours0(:,3))*mon_rgbmax;
        if dim == 2
            rgbl = [rgbl(:,:,1),rgbl(:,:,2),rgbl(:,:,3)]; % HACK!
        end
        if msg
            fprintf('WARNING: DKL produces Judd corrected xyY\n');
        end
    case {'luv','luv_pol'}
        Luv = colours0;
        [xyY, XYZ] = Luv2xyY(colours0, wp_xyY, 'xyY', dim);
    case {'lab','lab_pol'}
        Lab = colours0;
        [xyY, XYZ] = Lab2xyY(colours0, wp_xyY, dim);
    case 'hsv'
        hsv = colours0;
        rgbl = hsv2rgb(hsv)*mon_rgbmax;     
end

if isempty(XYZ)
        tmp = rgbl/mon_rgbmax; % Um warning zu vermeiden.
        XYZ = rgb2XYZ(tmp, mon_xyY(1:3,:), dim, mon_kwY);
%         switch lower(col_space)
%             case {'dkl', 'dkl_cart','dkl_pol'}    
%                 XYZ = XYZ2XYZ(XYZ, 'juddto1931', dim);
%         end
end
if isempty(xyY)
        xyY = XYZ2xyY(XYZ, dim);
end

%% CONVERSION TO RGB

% kY-Correction -----------------------------------------------------------
if ~isempty(mon_kwY)
    r_xyY = black_luminance_corrector(xyY, dim, mon_kwY, msg);
else
    r_xyY = xyY;
    if msg
        fprintf('KY2: No black luminance (KY) correction\n');
    end
end
r_XYZ = xyY2XYZ(r_xyY,dim);

% LINEAR RGB --------------------------------------------------------------
if dim == 2
    [rgbl(:,1), rgbl(:,2), rgbl(:,3)] =...
        XYZ2rgb(r_XYZ(:,1), r_XYZ(:,2), r_XYZ(:,3), mon_xyY(1:3,:),mon_rgbmax);
elseif dim == 3
    [rgbl(:,:,1), rgbl(:,:,2), rgbl(:,:,3)] =...
        XYZ2rgb(r_XYZ(:,:,1), r_XYZ(:,:,2), r_XYZ(:,:,3), mon_xyY(1:3,:),mon_rgbmax);
end

% GAMMUT ------------------------------------------------------------------
% Check gamut transgressions
[r_rgbl, gamut0, gamut1]  = gamutchecker(rgbl, mon_oog, mon_rgbmax, dim, msg);
oog = gamut0+gamut1;

% GAMMA -------------------------------------------------------------------
% Gamma correction (Translate linear values into gamma distributed ones)
if cal_mode == 0 % OLD VERSION with bit-loss
    r_rgbl     = round(r_rgbl);
    [rgb(:,1), rgb(:,2), rgb(:,3)] = gammacorrection(...
        r_rgbl(:,1), r_rgbl(:,2), r_rgbl(:,3),...
        mon_ldt(:,1), mon_ldt(:,2), mon_ldt(:,3)); % WARNING: LDT = LUT
elseif cal_mode == 1
    rgb = gammacorrector(r_rgbl, mon_ldt, dim);
end

%% REMAINIG CONVERSIONS

% LUV ---------------------------------------------------------------------
if isempty(Luv)
    Luv = xyY2Luv(xyY, wp_xyY, dim);
end

% LAB ---------------------------------------------------------------------
if isempty(Lab)
    Lab = xyY2Lab(xyY, wp_xyY, dim);
end

% DKL ---------------------------------------------------------------------
if isempty(dkl)
    if msg
        fprintf('WARNING: DKL requires Judd corrected xyY\n');
    end
    if dim == 2
        dkl = rgb2dkl(rgbl(:,1)/mon_rgbmax, rgbl(:,2)/mon_rgbmax, rgbl(:,3)/mon_rgbmax)';
    elseif dim == 3
        dkl = rgb2dkl(rgbl/mon_rgbmax);
    end
end

% HSV ---------------------------------------------------------------------
rgbl2 = rgbl/mon_rgbmax;
rgbl2(rgbl2 < 0) = 0; % Artifacts
rgbl2(rgbl2 > 1) = 1; % Artifacts
hsv = rgb2hsv(rgbl2);

%% CONE EXCITATIONS (LMS)
if dim == 2
    lms = XYZ2lms(XYZ, 'ss','1931');
else
    lms = 'not yet implemented for 3D';
end

%% MacLeod-Boynton space
if dim == 2
    lm = lms(:,1) + lms(:,2);
    l = lms(:,1)./lm;
    s = lms(:,3)./lm;    
    mlb = [lm,l,s];
else
    mlb = 'not yet implemented for 3D';
end

%% POLAR COORDINATES
if dim == 2
    [azi1, dkl_pol(:,2)] = cart2pol(dkl(:,2),dkl(:,3));
    [azi2, Luv_pol(:,2)] = cart2pol(Luv(:,2),Luv(:,3));
    [azi3, Lab_pol(:,2)] = cart2pol(Lab(:,2),Lab(:,3));
    dkl_pol(:,1) = rad2deg(azi1);
    Luv_pol(:,1) = rad2deg(azi2);
    Lab_pol(:,1) = rad2deg(azi3);
elseif dim == 3
    [azi1, dkl_pol(:,:,2)] = cart2pol(dkl(:,:,2),dkl(:,:,3));
    [azi2, Luv_pol(:,:,2)] = cart2pol(Luv(:,:,2),Luv(:,:,3));
    [azi3, Lab_pol(:,:,2)] = cart2pol(Lab(:,:,2),Lab(:,:,3));
    dkl_pol(:,:,1) = rad2deg(azi1);
    Luv_pol(:,:,1) = rad2deg(azi2);
    Lab_pol(:,:,1) = rad2deg(azi3); 
end

%% OUTPUT DATASET
if dim == 2
    colours2 = struct('rgb', rgb, 'oog', oog, 'rgbl', rgbl, 'hsv', hsv, 'XYZ', XYZ, 'xyY', xyY, 'lms', lms, 'mlb', mlb, 'dkl', dkl, 'dkl_pol', dkl_pol, 'Luv', Luv, 'Luv_pol', Luv_pol, 'Lab', Lab, 'Lab_pol', Lab_pol);
    % colours2 = dataset(rgb, oog, rgbl, hsv, XYZ, xyY, lms, mlb, dkl, dkl_pol, Luv, Luv_pol, Lab, Lab_pol);
elseif dim == 3
    colours2 = struct(...
        'rgb', rgb,...
        'oog', oog,...
        'rgbl', rgbl,...
        'hsv', hsv,...
        'XYZ', XYZ,...
        'xyY', xyY,... 
        'dkl', dkl,... 
        'dkl_pol', dkl_pol,... 
        'Luv', Luv,...
        'Luv_pol', Luv_pol,...
        'Lab', Lab,...
        'Lab_pol', Lab_pol);
end
%% ***************************** SUBFUNCTIONS *****************************
% see originals for details.

%% black_luminance_corrector
function r_xyY = black_luminance_corrector(xyY, dim, mon_kwY, msg)
% * 2018.03.29 [cw]

if dim == 2
    rx = xyY(:,1);
    ry = xyY(:,2);
    rY = xyY(:,3);
elseif dim == 3
    rx = xyY(:,:,1);
    ry = xyY(:,:,2);
    rY = xyY(:,:,3);
end

% Include only those that are not black = to avoid negative Y ---------
inds = rY >= mon_kwY(1);
rY(inds) = rY(inds) - mon_kwY(1);
if msg
    fprintf('KY2: Black luminance substracted from XYZ (step 2/2)\n');
end

% The others ----------------------------------------------------------
inds2 = ~inds; % Those that are darker than (empirical) black.

if sum(inds2(:))>0
    % Set values darker than black to black:
    rx(inds2) = 0;
    ry(inds2) = 0;
    rY(inds2) = 0;
    if msg
        fprintf('KY2: WARNING - Some colours can not be that dark because of higher KY (step 2/2)\n');
    end
end

if dim == 2
    r_xyY = [rx,ry,rY];
elseif dim == 3
    r_xyY = cat(3,rx,ry,rY);
end

%% d65
function [spec, xyY, XYZ] = d65 
spec = [...
    390,394,398,402,406,410,414,418,422,426,430,434,438,442,446,450,454,458,462,466,470,474,478,482,486,490,494,498,502,506,510,514,518,522,526,530,534,538,542,546,550,554,558,562,566,570,574,578,582,586,590,594,598,602,606,610,614,618,622,626,630,634,638,642,646,650,654,658,662,666,670,674,678,682,686,690,694,698,702,706,710,714,718,722,726,730,734,738,742,746,750,754,758,762,766,770,774,778,782,786,790,794,798,802,806,810,814,818,822,826,830,834,838,842,846,850,854,858,862,866,870,874,878,882,886,890,894,898,902,906,910,914,918,922,926,930,934,938,942,946,950,954,958,962,966,970,974,978,982,986,990,994,998,1002,1006,1010,1014,1018,1022,1026,1030,1034,1038,1042,1046,1050,1054,1058,1062,1066,1070;...
    0.001011,0.0012423,0.0015018,0.0016732,0.0017032,0.0017253,0.0017868,0.0018028,0.0017846,0.00175,0.0017755,0.0018478,0.0019394,0.0020504,0.002161,0.0022102,0.0022466,0.0022405,0.0022185,0.0021851,0.0021781,0.0022177,0.0022197,0.0021817,0.0021442,0.0021341,0.0021153,0.0020755,0.0020729,0.0020687,0.0020431,0.0019887,0.0019712,0.0019873,0.001994,0.0019957,0.0019722,0.001964,0.00197,0.0019633,0.0019824,0.0019613,0.0019197,0.0018871,0.0018335,0.0018081,0.0017822,0.0017949,0.0018263,0.0018043,0.0017817,0.0017633,0.0017621,0.0017682,0.0017544,0.0017387,0.0017232,0.0017,0.0016852,0.0016641,0.0016278,0.001631,0.0016458,0.0016619,0.0016282,0.0016011,0.0015693,0.0015583,0.0015744,0.0015742,0.0015535,0.0015258,0.0015066,0.0014472,0.0013281,0.0013093,0.0013377,0.0013626,0.0013764,0.0014032,0.0013172,0.0011995,0.0011365,0.00115,0.0011818,0.0012884,0.001344,0.0013618,0.0013687,0.0013641,0.0011876,0.00092345,0.00080802,0.00095521,0.0011627,0.0012527,0.0012763,0.0012674,0.0012387,0.0011809,0.0011691,0.0011782,0.0011546,0.0011402,0.0010958,0.0010094,0.00090752,0.00087219,0.00089571,0.00091662,0.00093843,0.00098883,0.0010313,0.0010387,0.0010412,0.0010247,0.0010173,0.0010506,0.0010283,0.00098681,0.00097608,0.00097969,0.00094042,0.0009377,0.0009124,0.00085781,0.00074793,0.00063707,0.00066593,0.00062873,0.00061256,0.00054837,0.00065004,0.00055712,0.00043172,0.0002988,0.00019778,0.00031247,0.00023395,0.00028113,0.00028639,0.00027263,0.00037932,0.00034933,0.00044396,0.00046109,0.00049045,0.00058478,0.00050633,0.00054741,0.00050282,0.00064242,0.00038118,0.00058444,0.00054012,0.0005736,0.00049225,0.00058515,0.00034405,0.00054662,0.00053393,0.00046259,0.00078293,0.00082086,0.00071446,0.00024265,0.0005643,0.001052,0.00021523,0.00065062,0.00044033];
[XYZ, xyY, wl_matched] = spectra2XYZ(spec);

%% spectra2XYZ
function [XYZ, xyY, wl_matched] = spectra2XYZ(SPECTRA, CMF, Interval, Illumination)

% OBJECTIVE ---------------------------------------------------------------
%   Converts spectra into CIE tristimulus values (XYZ) and CIE chromaticity
%   coordinates (xyY); accounts optionally for illumination conditions.
% EXAMPLES:
%   please run spectra2XYZ without any input in order to see input must
%   look like.
% INPUT -------------------------------------------------------------------
%   SPECTRA: 
%   A matrix containing the spectral values per wavelength (rows) for
%   different colour samples (columns).
%   CMF: May be specified by 2 ways:
%   a.)A matrix containing the colour matching functions (cmfs = spectra
%   for X, Y & Z) that allow converting spectra into CIE XYZ values; in the
%   first column must be the corresponding wavelengths.
%   b.) A string that specifies which colour matching functions shall be
%   taken and which refers to subfunctions contain them; may be 'cie1931',
%   'ciejudd', or 'ciejuddvoss'; per default it is 'cie1931'.
%   Interval (Optional):
%   A scalar gives the interval steps between wavelengths; default value is
%   5, i.e. all integer wavelengths are assumed to be given in the input
%   matrices.
%   Illumination (Optional):
%   Illumnination weights; optionally, i.e. when used for reflectance
%   conditions.
% OUTPUT ------------------------------------------------------------------
%   XYZ:
%   CIE tristimulus values XYZ for the respective colour samples.
%   xyY:
%   CIE chromaticity coordinates xyY for the respective colour samples.
%   wl_matched: Wavelengths.
% EXAMPLE ------------------------------------------------------------
%   Run without input.
% GENEALOGY ---------------------------------------------------------------
%   mo wrote spectra2XYZ.m.
%   2007apr28 cw reduced it to the conversation calculations. 
%   2009feb17 Added colour matching functions cie1931 as subfunctions;
%   added data_matcher as subfunction; added defaults [cw].
%   2010mar11 changed interval default to 1 [cw]
%   2014mar04 "fast solution"

% Options and default settings:
if nargin < 3
    Interval = 1;
    if nargin < 2
        CMF = cie1931;
        warning('By default colour matching function cie1931 have been used; you should specify, which ones you want!!!');
        if nargin < 1
            display('A sample of the SPECTRA (first input) looks like this:');
            display(sample_spectra);
            display('A sample of the CMF (second input) looks like this:');
            display(CMF(1:10,:));
            return; % end function directly.
        end
    end
end;

% Number of colour samples:
colours_n = size(SPECTRA, 2)-1;

% Calculating spectra for the input illumination (if inputed):
if nargin > 3
    for h = 1:colours_n
        matched = data_matcher({SPECTRA, Illumination}, Interval);
        SPECTRA = matched{1};
        Illumination = matched{2};
        SPECTRA(:,h+1) = Illumination(:,2).*SPECTRA(:,h+1);
    end;
end;

if ischar(CMF)
    CMF = eval(lower(CMF));
elseif ~isnumeric(CMF)
    error('The format for the CMF input is wrong!');
end

if size(SPECTRA,1)~= size(CMF,1) || SPECTRA(1,1)~= CMF(1,1) || SPECTRA(end,1)~= CMF(end,1)
    matched = data_matcher({SPECTRA, CMF}, Interval);
    SPECTRA = matched{1};
    CMF = matched{2};
    if nargin < 2
        warning('Your spectra & colour matching functions had different samplings; they have been matched by wavelength (= 1. col)!!!');
    end
end

% FAST SOLUTION (2014mar04):
% Converting spectra into tristimulus values (XYZ):
XYZ = SPECTRA(:,2:end)'*CMF(:,2:4)*683*Interval;
% Converting XYZ into chromaticity coordinates:
xyY = XYZ2xyY(XYZ, dim);

wl_matched = CMF(:,1);

%% cie1931
function cmf = cie1931
cmf = [...
    360,  0.000129900000,  0.000003917000,  0.000606100000	;...
    361,  0.000145847000,  0.000004393581,  0.000680879200	;...
    362,  0.000163802100,  0.000004929604,  0.000765145600	;...
    363,  0.000184003700,  0.000005532136,  0.000860012400	;...
    364,  0.000206690200,  0.000006208245,  0.000966592800	;...
    365,  0.000232100000,  0.000006965000,  0.001086000000	;...
    366,  0.000260728000,  0.000007813219,  0.001220586000	;...
    367,  0.000293075000,  0.000008767336,  0.001372729000	;...
    368,  0.000329388000,  0.000009839844,  0.001543579000	;...
    369,  0.000369914000,  0.000011043230,  0.001734286000	;...
    370,  0.000414900000,  0.000012390000,  0.001946000000	;...
    371,  0.000464158700,  0.000013886410,  0.002177777000	;...
    372,  0.000518986000,  0.000015557280,  0.002435809000	;...
    373,  0.000581854000,  0.000017442960,  0.002731953000	;...
    374,  0.000655234700,  0.000019583750,  0.003078064000	;...
    375,  0.000741600000,  0.000022020000,  0.003486000000	;...
    376,  0.000845029600,  0.000024839650,  0.003975227000	;...
    377,  0.000964526800,  0.000028041260,  0.004540880000	;...
    378,  0.001094949000,  0.000031531040,  0.005158320000	;...
    379,  0.001231154000,  0.000035215210,  0.005802907000	;...
    380,  0.001368000000,  0.000039000000,  0.006450001000	;...
    381,  0.001502050000,  0.000042826400,  0.007083216000	;...
    382,  0.001642328000,  0.000046914600,  0.007745488000	;...
    383,  0.001802382000,  0.000051589600,  0.008501152000	;...
    384,  0.001995757000,  0.000057176400,  0.009414544000	;...
    385,  0.002236000000,  0.000064000000,  0.010549990000	;...
    386,  0.002535385000,  0.000072344210,  0.011965800000	;...
    387,  0.002892603000,  0.000082212240,  0.013655870000	;...
    388,  0.003300829000,  0.000093508160,  0.015588050000	;...
    389,  0.003753236000,  0.000106136100,  0.017730150000	;...
    390,  0.004243000000,  0.000120000000,  0.020050010000	;...
    391,  0.004762389000,  0.000134984000,  0.022511360000	;...
    392,  0.005330048000,  0.000151492000,  0.025202880000	;...
    393,  0.005978712000,  0.000170208000,  0.028279720000	;...
    394,  0.006741117000,  0.000191816000,  0.031897040000	;...
    395,  0.007650000000,  0.000217000000,  0.036210000000	;...
    396,  0.008751373000,  0.000246906700,  0.041437710000	;...
    397,  0.010028880000,  0.000281240000,  0.047503720000	;...
    398,  0.011421700000,  0.000318520000,  0.054119880000	;...
    399,  0.012869010000,  0.000357266700,  0.060998030000	;...
    400,  0.014310000000,  0.000396000000,  0.067850010000	;...
    401,  0.015704430000,  0.000433714700,  0.074486320000	;...
    402,  0.017147440000,  0.000473024000,  0.081361560000	;...
    403,  0.018781220000,  0.000517876000,  0.089153640000	;...
    404,  0.020748010000,  0.000572218700,  0.098540480000	;...
    405,  0.023190000000,  0.000640000000,  0.110200000000	;...
    406,  0.026207360000,  0.000724560000,  0.124613300000	;...
    407,  0.029782480000,  0.000825500000,  0.141701700000	;...
    408,  0.033880920000,  0.000941160000,  0.161303500000	;...
    409,  0.038468240000,  0.001069880000,  0.183256800000	;...
    410,  0.043510000000,  0.001210000000,  0.207400000000	;...
    411,  0.048995600000,  0.001362091000,  0.233692100000	;...
    412,  0.055022600000,  0.001530752000,  0.262611400000	;...
    413,  0.061718800000,  0.001720368000,  0.294774600000	;...
    414,  0.069212000000,  0.001935323000,  0.330798500000	;...
    415,  0.077630000000,  0.002180000000,  0.371300000000	;...
    416,  0.086958110000,  0.002454800000,  0.416209100000	;...
    417,  0.097176720000,  0.002764000000,  0.465464200000	;...
    418,  0.108406300000,  0.003117800000,  0.519694800000	;...
    419,  0.120767200000,  0.003526400000,  0.579530300000	;...
    420,  0.134380000000,  0.004000000000,  0.645600000000	;...
    421,  0.149358200000,  0.004546240000,  0.718483800000	;...
    422,  0.165395700000,  0.005159320000,  0.796713300000	;...
    423,  0.181983100000,  0.005829280000,  0.877845900000	;...
    424,  0.198611000000,  0.006546160000,  0.959439000000	;...
    425,  0.214770000000,  0.007300000000,  1.039050100000	;...
    426,  0.230186800000,  0.008086507000,  1.115367300000	;...
    427,  0.244879700000,  0.008908720000,  1.188497100000	;...
    428,  0.258777300000,  0.009767680000,  1.258123300000	;...
    429,  0.271807900000,  0.010664430000,  1.323929600000	;...
    430,  0.283900000000,  0.011600000000,  1.385600000000	;...
    431,  0.294943800000,  0.012573170000,  1.442635200000	;...
    432,  0.304896500000,  0.013582720000,  1.494803500000	;...
    433,  0.313787300000,  0.014629680000,  1.542190300000	;...
    434,  0.321645400000,  0.015715090000,  1.584880700000	;...
    435,  0.328500000000,  0.016840000000,  1.622960000000	;...
    436,  0.334351300000,  0.018007360000,  1.656404800000	;...
    437,  0.339210100000,  0.019214480000,  1.685295900000	;...
    438,  0.343121300000,  0.020453920000,  1.709874500000	;...
    439,  0.346129600000,  0.021718240000,  1.730382100000	;...
    440,  0.348280000000,  0.023000000000,  1.747060000000	;...
    441,  0.349599900000,  0.024294610000,  1.760044600000	;...
    442,  0.350147400000,  0.025610240000,  1.769623300000	;...
    443,  0.350013000000,  0.026958570000,  1.776263700000	;...
    444,  0.349287000000,  0.028351250000,  1.780433400000	;...
    445,  0.348060000000,  0.029800000000,  1.782600000000	;...
    446,  0.346373300000,  0.031310830000,  1.782968200000	;...
    447,  0.344262400000,  0.032883680000,  1.781699800000	;...
    448,  0.341808800000,  0.034521120000,  1.779198200000	;...
    449,  0.339094100000,  0.036225710000,  1.775867100000	;...
    450,  0.336200000000,  0.038000000000,  1.772110000000	;...
    451,  0.333197700000,  0.039846670000,  1.768258900000	;...
    452,  0.330041100000,  0.041768000000,  1.764039000000	;...
    453,  0.326635700000,  0.043766000000,  1.758943800000	;...
    454,  0.322886800000,  0.045842670000,  1.752466300000	;...
    455,  0.318700000000,  0.048000000000,  1.744100000000	;...
    456,  0.314025100000,  0.050243680000,  1.733559500000	;...
    457,  0.308884000000,  0.052573040000,  1.720858100000	;...
    458,  0.303290400000,  0.054980560000,  1.705936900000	;...
    459,  0.297257900000,  0.057458720000,  1.688737200000	;...
    460,  0.290800000000,  0.060000000000,  1.669200000000	;...
    461,  0.283970100000,  0.062601970000,  1.647528700000	;...
    462,  0.276721400000,  0.065277520000,  1.623412700000	;...
    463,  0.268917800000,  0.068042080000,  1.596022300000	;...
    464,  0.260422700000,  0.070911090000,  1.564528000000	;...
    465,  0.251100000000,  0.073900000000,  1.528100000000	;...
    466,  0.240847500000,  0.077016000000,  1.486111400000	;...
    467,  0.229851200000,  0.080266400000,  1.439521500000	;...
    468,  0.218407200000,  0.083666800000,  1.389879900000	;...
    469,  0.206811500000,  0.087232800000,  1.338736200000	;...
    470,  0.195360000000,  0.090980000000,  1.287640000000	;...
    471,  0.184213600000,  0.094917550000,  1.237422300000	;...
    472,  0.173327300000,  0.099045840000,  1.187824300000	;...
    473,  0.162688100000,  0.103367400000,  1.138761100000	;...
    474,  0.152283300000,  0.107884600000,  1.090148000000	;...
    475,  0.142100000000,  0.112600000000,  1.041900000000	;...
    476,  0.132178600000,  0.117532000000,  0.994197600000	;...
    477,  0.122569600000,  0.122674400000,  0.947347300000	;...
    478,  0.113275200000,  0.127992800000,  0.901453100000	;...
    479,  0.104297900000,  0.133452800000,  0.856619300000	;...
    480,  0.095640000000,  0.139020000000,  0.812950100000	;...
    481,  0.087299550000,  0.144676400000,  0.770517300000	;...
    482,  0.079308040000,  0.150469300000,  0.729444800000	;...
    483,  0.071717760000,  0.156461900000,  0.689913600000	;...
    484,  0.064580990000,  0.162717700000,  0.652104900000	;...
    485,  0.057950010000,  0.169300000000,  0.616200000000	;...
    486,  0.051862110000,  0.176243100000,  0.582328600000	;...
    487,  0.046281520000,  0.183558100000,  0.550416200000	;...
    488,  0.041150880000,  0.191273500000,  0.520337600000	;...
    489,  0.036412830000,  0.199418000000,  0.491967300000	;...
    490,  0.032010000000,  0.208020000000,  0.465180000000	;...
    491,  0.027917200000,  0.217119900000,  0.439924600000	;...
    492,  0.024144400000,  0.226734500000,  0.416183600000	;...
    493,  0.020687000000,  0.236857100000,  0.393882200000	;...
    494,  0.017540400000,  0.247481200000,  0.372945900000	;...
    495,  0.014700000000,  0.258600000000,  0.353300000000	;...
    496,  0.012161790000,  0.270184900000,  0.334857800000	;...
    497,  0.009919960000,  0.282293900000,  0.317552100000	;...
    498,  0.007967240000,  0.295050500000,  0.301337500000	;...
    499,  0.006296346000,  0.308578000000,  0.286168600000	;...
    500,  0.004900000000,  0.323000000000,  0.272000000000	;...
    501,  0.003777173000,  0.338402100000,  0.258817100000	;...
    502,  0.002945320000,  0.354685800000,  0.246483800000	;...
    503,  0.002424880000,  0.371698600000,  0.234771800000	;...
    504,  0.002236293000,  0.389287500000,  0.223453300000	;...
    505,  0.002400000000,  0.407300000000,  0.212300000000	;...
    506,  0.002925520000,  0.425629900000,  0.201169200000	;...
    507,  0.003836560000,  0.444309600000,  0.190119600000	;...
    508,  0.005174840000,  0.463394400000,  0.179225400000	;...
    509,  0.006982080000,  0.482939500000,  0.168560800000	;...
    510,  0.009300000000,  0.503000000000,  0.158200000000	;...
    511,  0.012149490000,  0.523569300000,  0.148138300000	;...
    512,  0.015535880000,  0.544512000000,  0.138375800000	;...
    513,  0.019477520000,  0.565690000000,  0.128994200000	;...
    514,  0.023992770000,  0.586965300000,  0.120075100000	;...
    515,  0.029100000000,  0.608200000000,  0.111700000000	;...
    516,  0.034814850000,  0.629345600000,  0.103904800000	;...
    517,  0.041120160000,  0.650306800000,  0.096667480000	;...
    518,  0.047985040000,  0.670875200000,  0.089982720000	;...
    519,  0.055378610000,  0.690842400000,  0.083845310000	;...
    520,  0.063270000000,  0.710000000000,  0.078249990000	;...
    521,  0.071635010000,  0.728185200000,  0.073208990000	;...
    522,  0.080462240000,  0.745463600000,  0.068678160000	;...
    523,  0.089739960000,  0.761969400000,  0.064567840000	;...
    524,  0.099456450000,  0.777836800000,  0.060788350000	;...
    525,  0.109600000000,  0.793200000000,  0.057250010000	;...
    526,  0.120167400000,  0.808110400000,  0.053904350000	;...
    527,  0.131114500000,  0.822496200000,  0.050746640000	;...
    528,  0.142367900000,  0.836306800000,  0.047752760000	;...
    529,  0.153854200000,  0.849491600000,  0.044898590000	;...
    530,  0.165500000000,  0.862000000000,  0.042160000000	;...
    531,  0.177257100000,  0.873810800000,  0.039507280000	;...
    532,  0.189140000000,  0.884962400000,  0.036935640000	;...
    533,  0.201169400000,  0.895493600000,  0.034458360000	;...
    534,  0.213365800000,  0.905443200000,  0.032088720000	;...
    535,  0.225749900000,  0.914850100000,  0.029840000000	;...
    536,  0.238320900000,  0.923734800000,  0.027711810000	;...
    537,  0.251066800000,  0.932092400000,  0.025694440000	;...
    538,  0.263992200000,  0.939922600000,  0.023787160000	;...
    539,  0.277101700000,  0.947225200000,  0.021989250000	;...
    540,  0.290400000000,  0.954000000000,  0.020300000000	;...
    541,  0.303891200000,  0.960256100000,  0.018718050000	;...
    542,  0.317572600000,  0.966007400000,  0.017240360000	;...
    543,  0.331438400000,  0.971260600000,  0.015863640000	;...
    544,  0.345482800000,  0.976022500000,  0.014584610000	;...
    545,  0.359700000000,  0.980300000000,  0.013400000000	;...
    546,  0.374083900000,  0.984092400000,  0.012307230000	;...
    547,  0.388639600000,  0.987418200000,  0.011301880000	;...
    548,  0.403378400000,  0.990312800000,  0.010377920000	;...
    549,  0.418311500000,  0.992811600000,  0.009529306000	;...
    550,  0.433449900000,  0.994950100000,  0.008749999000	;...
    551,  0.448795300000,  0.996710800000,  0.008035200000	;...
    552,  0.464336000000,  0.998098300000,  0.007381600000	;...
    553,  0.480064000000,  0.999112000000,  0.006785400000	;...
    554,  0.495971300000,  0.999748200000,  0.006242800000	;...
    555,  0.512050100000,  1.000000000000,  0.005749999000	;...
    556,  0.528295900000,  0.999856700000,  0.005303600000	;...
    557,  0.544691600000,  0.999304600000,  0.004899800000	;...
    558,  0.561209400000,  0.998325500000,  0.004534200000	;...
    559,  0.577821500000,  0.996898700000,  0.004202400000	;...
    560,  0.594500000000,  0.995000000000,  0.003900000000	;...
    561,  0.611220900000,  0.992600500000,  0.003623200000	;...
    562,  0.627975800000,  0.989742600000,  0.003370600000	;...
    563,  0.644760200000,  0.986444400000,  0.003141400000	;...
    564,  0.661569700000,  0.982724100000,  0.002934800000	;...
    565,  0.678400000000,  0.978600000000,  0.002749999000	;...
    566,  0.695239200000,  0.974083700000,  0.002585200000	;...
    567,  0.712058600000,  0.969171200000,  0.002438600000	;...
    568,  0.728828400000,  0.963856800000,  0.002309400000	;...
    569,  0.745518800000,  0.958134900000,  0.002196800000	;...
    570,  0.762100000000,  0.952000000000,  0.002100000000	;...
    571,  0.778543200000,  0.945450400000,  0.002017733000	;...
    572,  0.794825600000,  0.938499200000,  0.001948200000	;...
    573,  0.810926400000,  0.931162800000,  0.001889800000	;...
    574,  0.826824800000,  0.923457600000,  0.001840933000	;...
    575,  0.842500000000,  0.915400000000,  0.001800000000	;...
    576,  0.857932500000,  0.907006400000,  0.001766267000	;...
    577,  0.873081600000,  0.898277200000,  0.001737800000	;...
    578,  0.887894400000,  0.889204800000,  0.001711200000	;...
    579,  0.902318100000,  0.879781600000,  0.001683067000	;...
    580,  0.916300000000,  0.870000000000,  0.001650001000	;...
    581,  0.929799500000,  0.859861300000,  0.001610133000	;...
    582,  0.942798400000,  0.849392000000,  0.001564400000	;...
    583,  0.955277600000,  0.838622000000,  0.001513600000	;...
    584,  0.967217900000,  0.827581300000,  0.001458533000	;...
    585,  0.978600000000,  0.816300000000,  0.001400000000	;...
    586,  0.989385600000,  0.804794700000,  0.001336667000	;...
    587,  0.999548800000,  0.793082000000,  0.001270000000	;...
    588,  1.009089200000,  0.781192000000,  0.001205000000	;...
    589,  1.018006400000,  0.769154700000,  0.001146667000	;...
    590,  1.026300000000,  0.757000000000,  0.001100000000	;...
    591,  1.033982700000,  0.744754100000,  0.001068800000	;...
    592,  1.040986000000,  0.732422400000,  0.001049400000	;...
    593,  1.047188000000,  0.720003600000,  0.001035600000	;...
    594,  1.052466700000,  0.707496500000,  0.001021200000	;...
    595,  1.056700000000,  0.694900000000,  0.001000000000	;...
    596,  1.059794400000,  0.682219200000,  0.000968640000	;...
    597,  1.061799200000,  0.669471600000,  0.000929920000	;...
    598,  1.062806800000,  0.656674400000,  0.000886880000	;...
    599,  1.062909600000,  0.643844800000,  0.000842560000	;...
    600,  1.062200000000,  0.631000000000,  0.000800000000	;...
    601,  1.060735200000,  0.618155500000,  0.000760960000	;...
    602,  1.058443600000,  0.605314400000,  0.000723680000	;...
    603,  1.055224400000,  0.592475600000,  0.000685920000	;...
    604,  1.050976800000,  0.579637900000,  0.000645440000	;...
    605,  1.045600000000,  0.566800000000,  0.000600000000	;...
    606,  1.039036900000,  0.553961100000,  0.000547866700	;...
    607,  1.031360800000,  0.541137200000,  0.000491600000	;...
    608,  1.022666200000,  0.528352800000,  0.000435400000	;...
    609,  1.013047700000,  0.515632300000,  0.000383466700	;...
    610,  1.002600000000,  0.503000000000,  0.000340000000	;...
    611,  0.991367500000,  0.490468800000,  0.000307253300	;...
    612,  0.979331400000,  0.478030400000,  0.000283160000	;...
    613,  0.966491600000,  0.465677600000,  0.000265440000	;...
    614,  0.952847900000,  0.453403200000,  0.000251813300	;...
    615,  0.938400000000,  0.441200000000,  0.000240000000	;...
    616,  0.923194000000,  0.429080000000,  0.000229546700	;...
    617,  0.907244000000,  0.417036000000,  0.000220640000	;...
    618,  0.890502000000,  0.405032000000,  0.000211960000	;...
    619,  0.872920000000,  0.393032000000,  0.000202186700	;...
    620,  0.854449900000,  0.381000000000,  0.000190000000	;...
    621,  0.835084000000,  0.368918400000,  0.000174213300	;...
    622,  0.814946000000,  0.356827200000,  0.000155640000	;...
    623,  0.794186000000,  0.344776800000,  0.000135960000	;...
    624,  0.772954000000,  0.332817600000,  0.000116853300	;...
    625,  0.751400000000,  0.321000000000,  0.000100000000	;...
    626,  0.729583600000,  0.309338100000,  0.000086133330	;...
    627,  0.707588800000,  0.297850400000,  0.000074600000	;...
    628,  0.685602200000,  0.286593600000,  0.000065000000	;...
    629,  0.663810400000,  0.275624500000,  0.000056933330	;...
    630,  0.642400000000,  0.265000000000,  0.000049999990	;...
    631,  0.621514900000,  0.254763200000,  0.000044160000	;...
    632,  0.601113800000,  0.244889600000,  0.000039480000	;...
    633,  0.581105200000,  0.235334400000,  0.000035720000	;...
    634,  0.561397700000,  0.226052800000,  0.000032640000	;...
    635,  0.541900000000,  0.217000000000,  0.000030000000	;...
    636,  0.522599500000,  0.208161600000,  0.000027653330	;...
    637,  0.503546400000,  0.199548800000,  0.000025560000	;...
    638,  0.484743600000,  0.191155200000,  0.000023640000	;...
    639,  0.466193900000,  0.182974400000,  0.000021813330	;...
    640,  0.447900000000,  0.175000000000,  0.000020000000	;...
    641,  0.429861300000,  0.167223500000,  0.000018133330	;...
    642,  0.412098000000,  0.159646400000,  0.000016200000	;...
    643,  0.394644000000,  0.152277600000,  0.000014200000	;...
    644,  0.377533300000,  0.145125900000,  0.000012133330	;...
    645,  0.360800000000,  0.138200000000,  0.000010000000	;...
    646,  0.344456300000,  0.131500300000,  0.000007733333	;...
    647,  0.328516800000,  0.125024800000,  0.000005400000	;...
    648,  0.313019200000,  0.118779200000,  0.000003200000	;...
    649,  0.298001100000,  0.112769100000,  0.000001333333	;...
    650,  0.283500000000,  0.107000000000,  0.000000000000	;...
    651,  0.269544800000,  0.101476200000,  0.000000000000	;...
    652,  0.256118400000,  0.096188640000,  0.000000000000	;...
    653,  0.243189600000,  0.091122960000,  0.000000000000	;...
    654,  0.230727200000,  0.086264850000,  0.000000000000	;...
    655,  0.218700000000,  0.081600000000,  0.000000000000	;...
    656,  0.207097100000,  0.077120640000,  0.000000000000	;...
    657,  0.195923200000,  0.072825520000,  0.000000000000	;...
    658,  0.185170800000,  0.068710080000,  0.000000000000	;...
    659,  0.174832300000,  0.064769760000,  0.000000000000	;...
    660,  0.164900000000,  0.061000000000,  0.000000000000	;...
    661,  0.155366700000,  0.057396210000,  0.000000000000	;...
    662,  0.146230000000,  0.053955040000,  0.000000000000	;...
    663,  0.137490000000,  0.050673760000,  0.000000000000	;...
    664,  0.129146700000,  0.047549650000,  0.000000000000	;...
    665,  0.121200000000,  0.044580000000,  0.000000000000	;...
    666,  0.113639700000,  0.041758720000,  0.000000000000	;...
    667,  0.106465000000,  0.039084960000,  0.000000000000	;...
    668,  0.099690440000,  0.036563840000,  0.000000000000	;...
    669,  0.093330610000,  0.034200480000,  0.000000000000	;...
    670,  0.087400000000,  0.032000000000,  0.000000000000	;...
    671,  0.081900960000,  0.029962610000,  0.000000000000	;...
    672,  0.076804280000,  0.028076640000,  0.000000000000	;...
    673,  0.072077120000,  0.026329360000,  0.000000000000	;...
    674,  0.067686640000,  0.024708050000,  0.000000000000	;...
    675,  0.063600000000,  0.023200000000,  0.000000000000	;...
    676,  0.059806850000,  0.021800770000,  0.000000000000	;...
    677,  0.056282160000,  0.020501120000,  0.000000000000	;...
    678,  0.052971040000,  0.019281080000,  0.000000000000	;...
    679,  0.049818610000,  0.018120690000,  0.000000000000	;...
    680,  0.046770000000,  0.017000000000,  0.000000000000	;...
    681,  0.043784050000,  0.015903790000,  0.000000000000	;...
    682,  0.040875360000,  0.014837180000,  0.000000000000	;...
    683,  0.038072640000,  0.013810680000,  0.000000000000	;...
    684,  0.035404610000,  0.012834780000,  0.000000000000	;...
    685,  0.032900000000,  0.011920000000,  0.000000000000	;...
    686,  0.030564190000,  0.011068310000,  0.000000000000	;...
    687,  0.028380560000,  0.010273390000,  0.000000000000	;...
    688,  0.026344840000,  0.009533311000,  0.000000000000	;...
    689,  0.024452750000,  0.008846157000,  0.000000000000	;...
    690,  0.022700000000,  0.008210000000,  0.000000000000	;...
    691,  0.021084290000,  0.007623781000,  0.000000000000	;...
    692,  0.019599880000,  0.007085424000,  0.000000000000	;...
    693,  0.018237320000,  0.006591476000,  0.000000000000	;...
    694,  0.016987170000,  0.006138485000,  0.000000000000	;...
    695,  0.015840000000,  0.005723000000,  0.000000000000	;...
    696,  0.014790640000,  0.005343059000,  0.000000000000	;...
    697,  0.013831320000,  0.004995796000,  0.000000000000	;...
    698,  0.012948680000,  0.004676404000,  0.000000000000	;...
    699,  0.012129200000,  0.004380075000,  0.000000000000	;...
    700,  0.011359160000,  0.004102000000,  0.000000000000	;...
    701,  0.010629350000,  0.003838453000,  0.000000000000	;...
    702,  0.009938846000,  0.003589099000,  0.000000000000	;...
    703,  0.009288422000,  0.003354219000,  0.000000000000	;...
    704,  0.008678854000,  0.003134093000,  0.000000000000	;...
    705,  0.008110916000,  0.002929000000,  0.000000000000	;...
    706,  0.007582388000,  0.002738139000,  0.000000000000	;...
    707,  0.007088746000,  0.002559876000,  0.000000000000	;...
    708,  0.006627313000,  0.002393244000,  0.000000000000	;...
    709,  0.006195408000,  0.002237275000,  0.000000000000	;...
    710,  0.005790346000,  0.002091000000,  0.000000000000	;...
    711,  0.005409826000,  0.001953587000,  0.000000000000	;...
    712,  0.005052583000,  0.001824580000,  0.000000000000	;...
    713,  0.004717512000,  0.001703580000,  0.000000000000	;...
    714,  0.004403507000,  0.001590187000,  0.000000000000	;...
    715,  0.004109457000,  0.001484000000,  0.000000000000	;...
    716,  0.003833913000,  0.001384496000,  0.000000000000	;...
    717,  0.003575748000,  0.001291268000,  0.000000000000	;...
    718,  0.003334342000,  0.001204092000,  0.000000000000	;...
    719,  0.003109075000,  0.001122744000,  0.000000000000	;...
    720,  0.002899327000,  0.001047000000,  0.000000000000	;...
    721,  0.002704348000,  0.000976589600,  0.000000000000	;...
    722,  0.002523020000,  0.000911108800,  0.000000000000	;...
    723,  0.002354168000,  0.000850133200,  0.000000000000	;...
    724,  0.002196616000,  0.000793238400,  0.000000000000	;...
    725,  0.002049190000,  0.000740000000,  0.000000000000	;...
    726,  0.001910960000,  0.000690082700,  0.000000000000	;...
    727,  0.001781438000,  0.000643310000,  0.000000000000	;...
    728,  0.001660110000,  0.000599496000,  0.000000000000	;...
    729,  0.001546459000,  0.000558454700,  0.000000000000	;...
    730,  0.001439971000,  0.000520000000,  0.000000000000	;...
    731,  0.001340042000,  0.000483913600,  0.000000000000	;...
    732,  0.001246275000,  0.000450052800,  0.000000000000	;...
    733,  0.001158471000,  0.000418345200,  0.000000000000	;...
    734,  0.001076430000,  0.000388718400,  0.000000000000	;...
    735,  0.000999949300,  0.000361100000,  0.000000000000	;...
    736,  0.000928735800,  0.000335383500,  0.000000000000	;...
    737,  0.000862433200,  0.000311440400,  0.000000000000	;...
    738,  0.000800750300,  0.000289165600,  0.000000000000	;...
    739,  0.000743396000,  0.000268453900,  0.000000000000	;...
    740,  0.000690078600,  0.000249200000,  0.000000000000	;...
    741,  0.000640515600,  0.000231301900,  0.000000000000	;...
    742,  0.000594502100,  0.000214685600,  0.000000000000	;...
    743,  0.000551864600,  0.000199288400,  0.000000000000	;...
    744,  0.000512429000,  0.000185047500,  0.000000000000	;...
    745,  0.000476021300,  0.000171900000,  0.000000000000	;...
    746,  0.000442453600,  0.000159778100,  0.000000000000	;...
    747,  0.000411511700,  0.000148604400,  0.000000000000	;...
    748,  0.000382981400,  0.000138301600,  0.000000000000	;...
    749,  0.000356649100,  0.000128792500,  0.000000000000	;...
    750,  0.000332301100,  0.000120000000,  0.000000000000	;...
    751,  0.000309758600,  0.000111859500,  0.000000000000	;...
    752,  0.000288887100,  0.000104322400,  0.000000000000	;...
    753,  0.000269539400,  0.000097335600,  0.000000000000	;...
    754,  0.000251568200,  0.000090845870,  0.000000000000	;...
    755,  0.000234826100,  0.000084800000,  0.000000000000	;...
    756,  0.000219171000,  0.000079146670,  0.000000000000	;...
    757,  0.000204525800,  0.000073858000,  0.000000000000	;...
    758,  0.000190840500,  0.000068916000,  0.000000000000	;...
    759,  0.000178065400,  0.000064302670,  0.000000000000	;...
    760,  0.000166150500,  0.000060000000,  0.000000000000	;...
    761,  0.000155023600,  0.000055981870,  0.000000000000	;...
    762,  0.000144621900,  0.000052225600,  0.000000000000	;...
    763,  0.000134909800,  0.000048718400,  0.000000000000	;...
    764,  0.000125852000,  0.000045447470,  0.000000000000	;...
    765,  0.000117413000,  0.000042400000,  0.000000000000	;...
    766,  0.000109551500,  0.000039561040,  0.000000000000	;...
    767,  0.000102224500,  0.000036915120,  0.000000000000	;...
    768,  0.000095394450,  0.000034448680,  0.000000000000	;...
    769,  0.000089023900,  0.000032148160,  0.000000000000	;...
    770,  0.000083075270,  0.000030000000,  0.000000000000	;...
    771,  0.000077512690,  0.000027991250,  0.000000000000	;...
    772,  0.000072313040,  0.000026113560,  0.000000000000	;...
    773,  0.000067457780,  0.000024360240,  0.000000000000	;...
    774,  0.000062928440,  0.000022724610,  0.000000000000	;...
    775,  0.000058706520,  0.000021200000,  0.000000000000	;...
    776,  0.000054770280,  0.000019778550,  0.000000000000	;...
    777,  0.000051099180,  0.000018452850,  0.000000000000	;...
    778,  0.000047676540,  0.000017216870,  0.000000000000	;...
    779,  0.000044485670,  0.000016064590,  0.000000000000	;...
    780,  0.000041509940,  0.000014990000,  0.000000000000	;...
    781,  0.000038733240,  0.000013987280,  0.000000000000	;...
    782,  0.000036142030,  0.000013051550,  0.000000000000	;...
    783,  0.000033723520,  0.000012178180,  0.000000000000	;...
    784,  0.000031464870,  0.000011362540,  0.000000000000	;...
    785,  0.000029353260,  0.000010600000,  0.000000000000	;...
    786,  0.000027375730,  0.000009885877,  0.000000000000	;...
    787,  0.000025524330,  0.000009217304,  0.000000000000	;...
    788,  0.000023793760,  0.000008592362,  0.000000000000	;...
    789,  0.000022178700,  0.000008009133,  0.000000000000	;...
    790,  0.000020673830,  0.000007465700,  0.000000000000	;...
    791,  0.000019272260,  0.000006959567,  0.000000000000	;...
    792,  0.000017966400,  0.000006487995,  0.000000000000	;...
    793,  0.000016749910,  0.000006048699,  0.000000000000	;...
    794,  0.000015616480,  0.000005639396,  0.000000000000	;...
    795,  0.000014559770,  0.000005257800,  0.000000000000	;...
    796,  0.000013573870,  0.000004901771,  0.000000000000	;...
    797,  0.000012654360,  0.000004569720,  0.000000000000	;...
    798,  0.000011797230,  0.000004260194,  0.000000000000	;...
    799,  0.000010998440,  0.000003971739,  0.000000000000	;...
    800,  0.000010253980,  0.000003702900,  0.000000000000	;...
    801,  0.000009559646,  0.000003452163,  0.000000000000	;...
    802,  0.000008912044,  0.000003218302,  0.000000000000	;...
    803,  0.000008308358,  0.000003000300,  0.000000000000	;...
    804,  0.000007745769,  0.000002797139,  0.000000000000	;...
    805,  0.000007221456,  0.000002607800,  0.000000000000	;...
    806,  0.000006732475,  0.000002431220,  0.000000000000	;...
    807,  0.000006276423,  0.000002266531,  0.000000000000	;...
    808,  0.000005851304,  0.000002113013,  0.000000000000	;...
    809,  0.000005455118,  0.000001969943,  0.000000000000	;...
    810,  0.000005085868,  0.000001836600,  0.000000000000	;...
    811,  0.000004741466,  0.000001712230,  0.000000000000	;...
    812,  0.000004420236,  0.000001596228,  0.000000000000	;...
    813,  0.000004120783,  0.000001488090,  0.000000000000	;...
    814,  0.000003841716,  0.000001387314,  0.000000000000	;...
    815,  0.000003581652,  0.000001293400,  0.000000000000	;...
    816,  0.000003339127,  0.000001205820,  0.000000000000	;...
    817,  0.000003112949,  0.000001124143,  0.000000000000	;...
    818,  0.000002902121,  0.000001048009,  0.000000000000	;...
    819,  0.000002705645,  0.000000977058,  0.000000000000	;...
    820,  0.000002522525,  0.000000910930,  0.000000000000	;...
    821,  0.000002351726,  0.000000849251,  0.000000000000	;...
    822,  0.000002192415,  0.000000791721,  0.000000000000	;...
    823,  0.000002043902,  0.000000738090,  0.000000000000	;...
    824,  0.000001905497,  0.000000688110,  0.000000000000	;...
    825,  0.000001776509,  0.000000641530,  0.000000000000	;...
    826,  0.000001656215,  0.000000598090,  0.000000000000	;...
    827,  0.000001544022,  0.000000557575,  0.000000000000	;...
    828,  0.000001439440,  0.000000519808,  0.000000000000	;...
    829,  0.000001341977,  0.000000484612,  0.000000000000	;...
    830,  0.000001251141,  0.000000451810,  0.000000000000	];
%% ciejudd
function cmf = ciejudd
    cmf = [...
        370,    0.0008,    0.0001,    0.0046	;...
        380,    0.0045,    0.0004,    0.0224	;...
        390,    0.0201,    0.0015,    0.0925	;...
        400,    0.0611,    0.0045,    0.2799	;...
        410,    0.1267,    0.0093,    0.5835	;...
        420,    0.2285,    0.0175,    1.0622	;...
        430,    0.3081,    0.0273,    1.4526	;...
        440,    0.3312,    0.0379,    1.6064	;...
        450,    0.2888,    0.0468,    1.4717	;...
        460,    0.2323,    0.0600,    1.2880	;...
        470,    0.1745,    0.0910,    1.1133	;...
        480,    0.0920,    0.1390,    0.7552	;...
        490,    0.0318,    0.2080,    0.4461	;...
        500,    0.0048,    0.3230,    0.2644	;...
        510,    0.0093,    0.5030,    0.1541	;...
        520,    0.0636,    0.7100,    0.0763	;...
        530,    0.1668,    0.8620,    0.0412	;...
        540,    0.2926,    0.9540,    0.0200	;...
        550,    0.4364,    0.9950,    0.0088	;...
        560,    0.5970,    0.9950,    0.0039	;...
        570,    0.7642,    0.9520,    0.0020	;...
        580,    0.9159,    0.8700,    0.0016	;...
        590,    1.0225,    0.7570,    0.0011	;...
        600,    1.0544,    0.6310,    0.0007	;...
        610,    0.9922,    0.5030,    0.0003	;...
        620,    0.8432,    0.3810,    0.0002	;...
        630,    0.6327,    0.2650,    0.0001	;...
        640,    0.4404,    0.1750,    0.0000	;...
        650,    0.2787,    0.1070,    0.0000	;...
        660,    0.1619,    0.0610,    0.0000	;...
        670,    0.0858,    0.0320,    0.0000	;...
        680,    0.0459,    0.0170,    0.0000	;...
        690,    0.0222,    0.0082,    0.0000	;...
        700,    0.0113,    0.0041,    0.0000	;...
        710,    0.0057,    0.0021,    0.0000	;...
        720,    0.0028,    0.0011,    0.0000	;...
        730,    0.0015,    0.0005,    0.0000	;...
        740,    0.0005,    0.0002,    0.0000	;...
        750,    0.0003,    0.0001,    0.0000	;...
        760,    0.0002,    0.0001,    0.0000	;...
        770,    0.0001,    0.0000,    0.0000	];
%% ciejuddvoss
function cmf = ciejuddvoss
    cmf = [...
        380, 2.689900e-003, 2.000000e-004, 1.226000e-002	;...
        385, 5.310500e-003, 3.955600e-004, 2.422200e-002	;...
        390, 1.078100e-002, 8.000000e-004, 4.925000e-002	;...
        395, 2.079200e-002, 1.545700e-003, 9.513500e-002	;...
        400, 3.798100e-002, 2.800000e-003, 1.740900e-001	;...
        405, 6.315700e-002, 4.656200e-003, 2.901300e-001	;...
        410, 9.994100e-002, 7.400000e-003, 4.605300e-001	;...
        415, 1.582400e-001, 1.177900e-002, 7.316600e-001	;...
        420, 2.294800e-001, 1.750000e-002, 1.065800e+000	;...
        425, 2.810800e-001, 2.267800e-002, 1.314600e+000	;...
        430, 3.109500e-001, 2.730000e-002, 1.467200e+000	;...
        435, 3.307200e-001, 3.258400e-002, 1.579600e+000	;...
        440, 3.333600e-001, 3.790000e-002, 1.616600e+000	;...
        445, 3.167200e-001, 4.239100e-002, 1.568200e+000	;...
        450, 2.888200e-001, 4.680000e-002, 1.471700e+000	;...
        455, 2.596900e-001, 5.212200e-002, 1.374000e+000	;...
        460, 2.327600e-001, 6.000000e-002, 1.291700e+000	;...
        465, 2.099900e-001, 7.294200e-002, 1.235600e+000	;...
        470, 1.747600e-001, 9.098000e-002, 1.113800e+000	;...
        475, 1.328700e-001, 1.128400e-001, 9.422000e-001	;...
        480, 9.194400e-002, 1.390200e-001, 7.559600e-001	;...
        485, 5.698500e-002, 1.698700e-001, 5.864000e-001	;...
        490, 3.173100e-002, 2.080200e-001, 4.466900e-001	;...
        495, 1.461300e-002, 2.580800e-001, 3.411600e-001	;...
        500, 4.849100e-003, 3.230000e-001, 2.643700e-001	;...
        505, 2.321500e-003, 4.054000e-001, 2.059400e-001	;...
        510, 9.289900e-003, 5.030000e-001, 1.544500e-001	;...
        515, 2.927800e-002, 6.081100e-001, 1.091800e-001	;...
        520, 6.379100e-002, 7.100000e-001, 7.658500e-002	;...
        525, 1.108100e-001, 7.951000e-001, 5.622700e-002	;...
        530, 1.669200e-001, 8.620000e-001, 4.136600e-002	;...
        535, 2.276800e-001, 9.150500e-001, 2.935300e-002	;...
        540, 2.926900e-001, 9.540000e-001, 2.004200e-002	;...
        545, 3.622500e-001, 9.800400e-001, 1.331200e-002	;...
        550, 4.363500e-001, 9.949500e-001, 8.782300e-003	;...
        555, 5.151300e-001, 1.000100e+000, 5.857300e-003	;...
        560, 5.974800e-001, 9.950000e-001, 4.049300e-003	;...
        565, 6.812100e-001, 9.787500e-001, 2.921700e-003	;...
        570, 7.642500e-001, 9.520000e-001, 2.277100e-003	;...
        575, 8.439400e-001, 9.155800e-001, 1.970600e-003	;...
        580, 9.163500e-001, 8.700000e-001, 1.806600e-003	;...
        585, 9.770300e-001, 8.162300e-001, 1.544900e-003	;...
        590, 1.023000e+000, 7.570000e-001, 1.234800e-003	;...
        595, 1.051300e+000, 6.948300e-001, 1.117700e-003	;...
        600, 1.055000e+000, 6.310000e-001, 9.056400e-004	;...
        605, 1.036200e+000, 5.665400e-001, 6.946700e-004	;...
        610, 9.923900e-001, 5.030000e-001, 4.288500e-004	;...
        615, 9.286100e-001, 4.417200e-001, 3.181700e-004	;...
        620, 8.434600e-001, 3.810000e-001, 2.559800e-004	;...
        625, 7.398300e-001, 3.205200e-001, 1.567900e-004	;...
        630, 6.328900e-001, 2.650000e-001, 9.769400e-005	;...
        635, 5.335100e-001, 2.170200e-001, 6.894400e-005	;...
        640, 4.406200e-001, 1.750000e-001, 5.116500e-005	;...
        645, 3.545300e-001, 1.381200e-001, 3.601600e-005	;...
        650, 2.786200e-001, 1.070000e-001, 2.423800e-005	;...
        655, 2.148500e-001, 8.165200e-002, 1.691500e-005	;...
        660, 1.616100e-001, 6.100000e-002, 1.190600e-005	;...
        665, 1.182000e-001, 4.432700e-002, 8.148900e-006	;...
        670, 8.575300e-002, 3.200000e-002, 5.600600e-006	;...
        675, 6.307700e-002, 2.345400e-002, 3.954400e-006	;...
        680, 4.583400e-002, 1.700000e-002, 2.791200e-006	;...
        685, 3.205700e-002, 1.187200e-002, 1.917600e-006	;...
        690, 2.218700e-002, 8.210000e-003, 1.313500e-006	;...
        695, 1.561200e-002, 5.772300e-003, 9.151900e-007	;...
        700, 1.109800e-002, 4.102000e-003, 6.476700e-007	;...
        705, 7.923300e-003, 2.929100e-003, 4.635200e-007	;...
        710, 5.653100e-003, 2.091000e-003, 3.330400e-007	;...
        715, 4.003900e-003, 1.482200e-003, 2.382300e-007	;...
        720, 2.825300e-003, 1.047000e-003, 1.702600e-007	;...
        725, 1.994700e-003, 7.401500e-004, 1.220700e-007	;...
        730, 1.399400e-003, 5.200000e-004, 8.710700e-008	;...
        735, 9.698000e-004, 3.609300e-004, 6.145500e-008	;...
        740, 6.684700e-004, 2.492000e-004, 4.316200e-008	;...
        745, 4.614100e-004, 1.723100e-004, 3.037900e-008	;...
        750, 3.207300e-004, 1.200000e-004, 2.155400e-008	;...
        755, 2.257300e-004, 8.462000e-005, 1.549300e-008	;...
        760, 1.597300e-004, 6.000000e-005, 1.120400e-008	;...
        765, 1.127500e-004, 4.244600e-005, 8.087300e-009	;...
        770, 7.951300e-005, 3.000000e-005, 5.834000e-009	;...
        775, 5.608700e-005, 2.121000e-005, 4.211000e-009	;...
        780, 3.954100e-005, 1.498900e-005, 3.038300e-009	;...
        785, 2.785200e-005, 1.058400e-005, 2.190700e-009	;...
        790, 1.959700e-005, 7.465600e-006, 1.577800e-009	;...
        795, 1.377000e-005, 5.259200e-006, 1.134800e-009	;...
        800, 9.670000e-006, 3.702800e-006, 8.156500e-010	;...
        805, 6.791800e-006, 2.607600e-006, 5.862600e-010	;...
        810, 4.770600e-006, 1.836500e-006, 4.213800e-010	;...
        815, 3.355000e-006, 1.295000e-006, 3.031900e-010	;...
        820, 2.353400e-006, 9.109200e-007, 2.175300e-010	;...
        825, 1.637700e-006, 6.356400e-007, 1.547600e-010];

%% data_matcher
function [MATCHEDDATACELLS] = data_matcher(DATASETCELLS, Interval)
%OBJECTIVE ----------------------------------------------------------------
%   Matches two or more data matrices ...
%   - either: according to the smallest interval of ids, for which data is
%   available in all of the input datasets.
%   - or: according to a given vector of ids. 
%   Ids can be any ordered numeric values, e.g. heighth, wavelengths, etc.
%GENEALOGY: Revised, light version from 2009feb17 [cw].
data_n = numel(DATASETCELLS);
% Define common ids for matching the data: --------------------------------
if numel(Interval) == 1
    mins= [];
    maxes = [];
    for k=1:data_n
        old_ids    = DATASETCELLS{k};
        old_ids = old_ids(:,1);
        mins    = [mins,   min(old_ids(:,1))];
        maxes   = [maxes,  max(old_ids(:,1))];
    end;
    bound_lower=max(mins);
    bound_upper=min(maxes);
    new_ids = [bound_lower:Interval:bound_upper]';
elseif numel(Interval) > 1 
    new_ids = Interval;
end;
% Match data based on the ids, if necessary by interpolation: -------------
for k=1:data_n
    data    = DATASETCELLS{k};
    data    = data(:,2:end);
    old_ids    = DATASETCELLS{k};
    old_ids = old_ids(:,1);
    new_data = interp1(old_ids, data, new_ids, 'linear');
    MATCHEDDATACELLS{k,1} = [new_ids,new_data];
end;

%% deg2rad
function [RADIAN] = deg2rad(DEGREE)

% Converts angles in degrees into angles in radians;

RADIAN = DEGREE*2*pi/360;

%% dkl2rgb
function rgb = dkl2rgb(az, el, r, s, with_correction)
%DKL2RGB  Convert polar DKL coordinates to RGB.
%   RGB = DKL2RGB(AZIMUTH, ELEVATION, RADIUS) returns the corresponding 
%   RGB color image. AZIMUTH specifies the angle with respect to the 
%   constant blue (L-M) axis in DKL space and must be given in radians
%   in the range [0, 2*pi]. ELEVATION specifies the angle with respect to
%   the isoluminant plane and must be given in radians
%   in the range [-pi, pi]. RADIUS must be in the range [0,1]. 
%     
%   Function INITMON must be called once prior to DKL2RGB.
%
%
%Example 1: RGB values of sample DKL color
%
%   initmon;                    % must be called once to initialize 
%                               %    the global conversion matrices
%   R = dkl2rgb(rad(0), 0, 1))  % "red" along (L-M) axis 
%   imshow(reshape(R,1,1,3))    % rearrange as color image and show
%
%
%Example 2: Isoluminant plane of DKL space
%  
%   initmon; % if not already called before
%   halfimsize = 256;
%   x = -halfimsize:halfimsize; y = fliplr(x); % (x,y) coordinate systems
%   [X, Y] = meshgrid(x, y);
%   R = sqrt(X.^2 + Y.^2); PHI = atan2(Y, X);
%   R = R/halfimsize; R(R>1) = 0;   % R in the range [0, 1]   
%   PHI(PHI<0) = PHI(PHI<0) + 2*pi; % PHI in the range [0, 2*pi] 
%   imshow(dkl2rgb(PHI, 0, R));  
%  
%   See also DKL2RGB, INITMON.
%  
%Thorsten Hansen 2003-06-23
%                2004-04-10  faster computation
%                            warning with number of remapped values 
%                            NEW DEFAULT: NO correction!!!
% dkl given as row vector of polar coordinates (az, el, r)
% az and el given in radians

if nargin < 4, s = 1; end % no scaling
if nargin < 5, with_correction = 0; end % default is no correction

global M_dkl2rgb

if prod(size(M_dkl2rgb)) == 0
  error('initialize conversion matrices by INIMON.')
end

[x,y,z] = sph2cart(az, el, r);
x = x/s; y = y/s; z = z/s;

if size(x,1) == 1 & size(x,2) == 1 % single value
  rgb = 0.5 + M_dkl2rgb*[z;x;y]/2; % z:= lum, x:= cb, y:= tc
elseif ndims(x) == 2
  % rgb = zeros(size(x,1), size(x,2), 3);
  % for i=1:size(x,1)
  %  for j=1:size(x,2)
  %    rgb(i,j,:) = 0.5 + M_dkl2rgb*[z(i,j);x(i,j);y(i,j)]/2;
  %  end
  %end
  dkl= cat(3, z, x, y);
  [rows cols thirdDim] = size(dkl);
  rgb = reshape(reshape(dkl, rows*cols, 3) * M_dkl2rgb', rows, cols, 3);
  rgb = 0.5 + rgb/2;
else
  error('dimension to large.')
end

if with_correction
  ind = find(rgb<0);
  if ~isempty(ind)
    warning([int2str(length(ind)) ' negative color values mapped to 0.'])
    rgb(ind) = 0;  
  end

  ind = find(rgb>1);
  if ~isempty(ind)
    warning([int2str(length(ind)) ' color values greater 1 mapped to 1.'])
    rgb(ind) = 1;  
  end
end

%% dklcart2rgb
function rgb = dklcart2rgb(dkl, dim)
%DKLCART2RGB  Convert cartesian DKL coordinates to RGB.  
%   RGB = DKL2CARTRGB(LUM, CB, TC) returns the corresponding
%   RGB color value. LUM, CB and TC specify the value along the 
%   luminance axis (L+M), constant blue axis (L-M), and tritanopic
%   confusion axis (S) in the range [-1, 1].
%   
%   Function INITMON must be called once prior to DKLCART2RGB. 
%
%   See also DKL2RGB, RGB2DKL, INITMON.
%
%Thorsten Hansen 2004-09-23
%                2005-11-08 faster computation
  
% first lets check whether the input is in the valid range [-1,1]
%if gmax(abs(dkl) > 1.0)   
%  warning('Cartesian DKL coordinates out of bounds [-1,1].')
%end

if nargin < 2
    dim = 2;
end
    
global M_dkl2rgb
if dim == 3 % full image 
  %rgb = zeros(size(dkl,1), size(dkl,2), 3);
  %for i=1:size(dkl,1)
  %  for j=1:size(dkl,2)
  %    rgb(i,j,:) = 0.5 + M_dkl2rgb*[dkl(i,j,1);dkl(i,j,2);dkl(i,j,3)]/2;
  %  end
  %end
  [rows cols thirdDim] = size(dkl);
  rgb = reshape(reshape(dkl, rows*cols, 3) * M_dkl2rgb', rows, cols, 3);
  rgb = 0.5 + rgb/2;
elseif dim == 2
  rgb = 0.5 + M_dkl2rgb*(dkl')/2;
else
  error('dimension to large.')
end

% remap values outside range [0,1]
% ind = find(rgb<0);
% if ~isempty(ind)
%   % warning('negative color values mapped to 0.')
%   rgb(ind) = 0;
% end
%  
% ind = find(rgb>1);
% if ~isempty(ind)
%   % warning('color values greater 1 mapped to 1.')
%   rgb(ind) = 1;
% end

%% gammacorrector
function RGBg = gammacorrector(RGBl, LDT, dim)
% 2012jan16 * [cw]
% 2012jan20 added dim to enable image input [cw]
% 2012jan25 added subfunction to reduce memory load [cw]
% 2012jan26 added out of gamut warning [cw]
% 2012feb13 used version "Vangorp" to determine closes values by linear
% interpolation in order to spare memory load (cf. subfunction 2) [cw].
% 2012aug30 corrected bug for dim = 2 (as done in earlier subfunctions) [cw]


if nargin < 3
    dim = 3;
end

out1 = sum(sum(sum(RGBl>LDT(end,1)+0.5,3),2),1); % usually 255
out2 = sum(sum(sum(RGBl<-0.5,3),2),1); % usually 255
out = out1+out2;
n = size(RGBl>LDT(end,1),3) * size(RGBl>LDT(end,1),2) * size(RGBl>LDT(end,1),1); 
if out > 0
    fprintf('WARNING: %d / %.0f%% are out of gamut, %d / %.0f%% >max and %d / %.0f%%\n', out, out/n*100, out1, out1/n*100, out2, out2/n*100);
end

% Old version:
% if dim == 2
%     [tmp dff] = min(abs(RGBl - LDT));
% elseif dim == 3
%     for dm = 1:3;
%         dff(:,:,dm) = gammacorrector_subfunction(RGBl(:,:,dm), LDT(:,dm));
%     end;
% end
% 
% RGBg2 = dff-1;

if dim == 2
     for dm = 1:3;
        RGBg(:,dm) = gammacorrector_subfunction2(RGBl(:,dm), LDT(:,dm));
    end;
elseif dim == 3
    for dm = 1:3;
        RGBg(:,:,dm) = gammacorrector_subfunction2(RGBl(:,:,dm), LDT(:,dm));
    end;
end

%% gammainvcorrector
function [RGB] = gammainvcorrector(RGB0, LUT, dim, mon_rgbmax)
%DESCRIPTION --------------------------------------------------------------
%   
%INPUT --------------------------------------------------------------------
%   RGB     = R, G and B values without gammacorrection, may be
%   matrices, such as image layers. 
%   LUT     = Look-Up-Tables (rather "Look-Down-Tables"); 3 columns for
%   R,G, and B. 
%OUTPUT -------------------------------------------------------------------
%   RGB = gamma-corrected triplet, in the dimensions of the input.
% GENEALOGY ---------------------------------------------------------------
% 18.4.2007 mo wrote file
% 20.4.2007 generalised option [cw].
% 30.5.2007 generalised option II [cw].
% 2008spt24 generalised input for matrices [cw].
% 2009feb17 completed comments [cw].
% 2009jul1  corrected horrible error (all the same luts, namely red ones) [cw].
% 2012.12.15 made gammainvcorrector out of old gammacorrection [cw].

% COPE WITH INPUT VARIATIONS
if nargin < 3
    dim = ndims(RGB0);
end
% CHECK RGB0:
if size(RGB0, dim) ~= 3
    if size(RGB0, dim) == 4
        warning('Input format: RGB0 has 4 entries; 4th dimensions considered as alpha (transparency)');
    else
        error('Input format: RGB0 does not have 3 entries for R, G, and B');
    end
end

% CHECK LUTs:
if size(LUT,2) ~= 3
    error('Input format: LUT do not have 3 columns for R, G, and B');
end

% GAMMA CORRECTION = LOOK UP
for dm = 1:3
    if dim == 2
        RGB(:,dm)   = gammainvcorrector_subfunction(RGB0(:,dm),LUT(:,dm),mon_rgbmax);
    elseif dim == 3
        RGB(:,:,dm) = gammainvcorrector_subfunction(RGB0(:,:,dm),LUT(:,dm),mon_rgbmax);
    end
end

% gammainvcorrector_subfunction
function RGB = gammainvcorrector_subfunction(RGB0, LUT, mon_rgbmax)
% For R,G,B separately (!).

RGB0 = overflow_checker(RGB0,mon_rgbmax);
sz = size(RGB0);
inds = ~isnan(RGB0);
inds_nan = isnan(RGB0);
RGB = LUT(RGB0(inds) + 1);
RGB(inds_nan) = NaN;
RGB = reshape(RGB, sz(1), sz(2));

% overflow_checker
function RGB = overflow_checker(RGB0, mon_rgbmax)
RGB = RGB0;
inds = RGB > mon_rgbmax;
inds2 = RGB < 0;
RGB(inds) = mon_rgbmax;
RGB(inds2) = 0;
if sum(inds) > 0 | sum(inds2) > 0
    disp('overflows truncated to the range [0 255]')
end

%% gammacorrector_subfunction
function dff = gammacorrector_subfunction(RGBl1, LDT1)
%2012jan25

Klaus = repmat(RGBl1, [1,1,size(LDT1,1)]);
Peter = repmat(shiftdim(LDT1,-2), [size(RGBl1,1), size(RGBl1,2), 1]);
[tmp dff] = min(abs(Klaus-Peter),[],3);

% too slow:
% for nr = 1:size(LDT1,1)
%     tmp(:,:,nr) = abs(RGBl1 - LDT1(nr));
% end
% dff = min(tmp, [], 3);

%% gammacorrector_subfunction2
function RGBg1 = gammacorrector_subfunction2(RGBl1, LDT1)
y1 = (1:numel(LDT1))'-1;
RGBg1 = round(interp1(LDT1, y1, RGBl1, 'linear', 'extrap'));

%% gammacorrection
function [R_corrected, G_corrected, B_corrected] = gammacorrection(R, G, B, LUT, LUT2, LUT3)
%DESCRIPTION --------------------------------------------------------------
%   
%INPUT --------------------------------------------------------------------
%   R, G, B     = R, G and B values without gammacorrection, may be
%   matrices, such as image layers. 
%   LUT, LUT2, LUT3 = Vectors with Look-Up-Tables; 2 formats are possible:
%           format1: can be variable LUT alone as a cell array format with
%           all three vectors (for r, g and b) in one cell variable or 
%           format2: three vectors LUT, LUT2 and LUT3 in double format with
%           LUTs for r, g and b respectively; 
%OUTPUT -------------------------------------------------------------------
%   rgb_corrected = column vector with the gamma corrected triplet
% GENEALOGY ---------------------------------------------------------------
% 18.4.2007 mo wrote file
% 20.4.2007 generalised option [cw].
% 30.5.2007 generalised option II [cw].
% 2008spt24 generalised input for matrices [cw].
% 2009feb17 completed comments [cw].
% 2009jul1  corrected horrible error (all the same luts, namely red ones) [cw].

%% COPE WITH INPUT VARIATIONS
if nargin == 4 && iscell(LUT)
    redlut      = LUT{1};
    greenlut    = LUT{2};
    bluelut     = LUT{3};
elseif nargin > 4 && isnumeric(LUT)
    if min(size(LUT)) == 1
        redlut      = LUT;
        greenlut    = LUT2;
        bluelut     = LUT3;
    elseif min(size(LUT)) == 2
        redlut      = LUT(:,2);
        greenlut    = LUT2(:,2);
        bluelut     = LUT3(:,2);
    else
        error('Please reconsider the format of your LUTs!');
    end
else    
    error('Your input Look-Up-Tables (LUT) are in the wrong format! Please check help of function!');
end;

% GAMMA CORRECTION = LOOK UP
% R
sz = size(R);
inds = ~isnan(R);
inds_nan = isnan(R);
R_corrected = redlut(R(inds) + 1);
R_corrected(inds_nan) = NaN;
R_corrected = reshape(R_corrected, sz(1), sz(2));
% G
sz = size(G);
inds = ~isnan(G);
inds_nan = isnan(G);
G_corrected = greenlut(G(inds) + 1);
G_corrected(inds_nan) = NaN;
G_corrected = reshape(G_corrected, sz(1), sz(2));
% B
sz = size(B);
inds = ~isnan(B);
inds_nan = isnan(B);
B_corrected = bluelut(B(inds) + 1);
B_corrected(inds_nan) = NaN;
B_corrected = reshape(B_corrected, sz(1), sz(2));

% WARNINGS IF VALUES OUT OF GAMMUT (necessary? 2009feb)
inds = find(R_corrected > 255);
R_corrected(inds) = 255;
inds2 = find(R_corrected < 0);
R_corrected(inds2) = 0;
if ~isempty(inds)| ~isempty(inds2)
    disp('overflows truncated to the range [0 255]')
end
inds = find(G_corrected > 255);
G_corrected(inds) = 255;
inds2 = find(G_corrected < 0);
G_corrected(inds2) = 0;
if ~isempty(inds)| ~isempty(inds2)
    disp('overflows truncated to the range [0 255]')
end
inds = find(B_corrected > 255);
B_corrected(inds) = 255;
inds2 = find(B_corrected < 0);
B_corrected(inds2) = 0;
if ~isempty(inds)| ~isempty(inds2)
    disp('overflows truncated to the range [0 255]')
end

%% gamut_checker
function [rgbl2, inds0, inds255] = gamutchecker(rgbl1, mon_oog, rgb_max, dim, wrng_detail)
%2012may10
%2014oct09 corrected bugs for 3D matrices (images); added wrng_detail [cw]

if nargin < 5
    wrng_detail = 1;
    if nargin < 4
        dim = 2;
        if nargin < 3
            rgb_max = 255;
            if nargin < 2
                mon_oog = [0 255; 0 255; 0 255];
            end
        end
    end
end

n = size(rgbl1,1)*size(rgbl1,2);
rgbl2 = rgbl1;
if dim == 2
    for k = 1:size(rgbl2,2)
        ind1 = rgbl1(:,k) < mon_oog(k,1);
        inds0(:,k) = ind1;
        ind2 = rgbl1(:,k) > mon_oog(k,2);
        inds255(:,k) = ind2;
    end
    rgbl2(inds0) = 0;
    rgbl2(inds255) = rgb_max;
elseif dim == 3
    for k = 1:size(rgbl2,3)
        ind1 = rgbl1(:,:,k) < mon_oog(k,1);
        inds0(:,:,k) = ind1;
        ind2 = rgbl1(:,:,k) > mon_oog(k,2);
        inds255(:,:,k) = ind2;     
    end    
end
rgbl2(inds0) = 0;
rgbl2(inds255) = rgb_max;

if dim == 2
    indr = zeros(size(rgbl1,1),1);
    indg = zeros(size(rgbl1,1),1);
    indb = zeros(size(rgbl1,1),1);
    indr2 = zeros(size(rgbl1,1),1);
    indg2 = zeros(size(rgbl1,1),1);
    indb2 = zeros(size(rgbl1,1),1);
elseif dim == 3
    indr = zeros(size(rgbl1,1),size(rgbl1,2),1);
    indg = zeros(size(rgbl1,1),size(rgbl1,2),1);
    indb = zeros(size(rgbl1,1),size(rgbl1,2),1);
    indr2 = zeros(size(rgbl1,1),size(rgbl1,2),1);
    indg2 = zeros(size(rgbl1,1),size(rgbl1,2),1);
    indb2 = zeros(size(rgbl1,1),size(rgbl1,2),1);
end

if sum(inds0(:))>0 | sum(inds255(:))>0
    if dim == 2
        indr = rgbl1(:,1) < mon_oog(1,1);
        indg = rgbl1(:,2) < mon_oog(2,1);
        indb = rgbl1(:,3) < mon_oog(3,1);
        indr2 = rgbl1(:,1) > mon_oog(1,2);
        indg2 = rgbl1(:,2) > mon_oog(2,2);
        indb2 = rgbl1(:,3) > mon_oog(3,2);
        
    elseif dim == 3
        indr = rgbl1(:,:,1) < mon_oog(1,1);
        indg = rgbl1(:,:,2) < mon_oog(2,1);
        indb = rgbl1(:,:,3) < mon_oog(3,1);
        indr2 = rgbl1(:,:,1) > mon_oog(1,2);
        indg2 = rgbl1(:,:,2) > mon_oog(2,2);
        indb2 = rgbl1(:,:,3) > mon_oog(3,2);
    end
    if wrng_detail
        if sum(indr(:)) > 0
            fprintf('WARNING: R < 0 for %d.\n', sum(indr(:)));
        end
        if sum(indr2(:)) > 0
            fprintf('WARNING: R > %d for %d.\n', rgb_max, sum(indr2(:)));
        end
        if sum(indg(:)) > 0
            fprintf('WARNING: G < 0 for %d.\n', sum(indg(:)));
        end
        if sum(indg2(:)) > 0
            fprintf('WARNING: G > %d for %d.\n', rgb_max, sum(indg2(:)));
        end
        if sum(indb(:)) > 0
            fprintf('WARNING: B < 0 for %d.\n', sum(indb(:)));
        end
        if sum(indb2(:)) > 0
            fprintf('WARNING: B > %d for %d.\n', rgb_max, sum(indb2(:)));
        end
    end
    k0 = sum(any(inds0(:),dim));
    k255 = sum(any(inds255(:), dim));
    inds = inds0 | inds255;
    k = sum(any(inds(:),dim));
    if wrng_detail
        fprintf('WARNING: Overall %d <0 (%.1f%%) + %d >%d (%.1f%%) have been reset to gamut boundaries (%d of %d ~%.1f%%).\n', k0, (k0/n)*100, k255, rgb_max, (k255/n)*100, k, n, (k/n)*100);
    end
else
    if wrng_detail
        fprintf('OK: All rgb within gamut\n');
    end
end

%% initmon
function initmon(INITDATA, msg)
%INITMON  Initializes DKL<-->RGB conversion matrices
% OBJECTIVE
%   INITMON(INITDATA) initializes DKL<-->RGB conversion matrices for the
%   CIE xyY coordinates of monitor phosphors given in INITDATA. 
% PARTICULARITY
%   Function INITMON must be called once prior to subsequent calls of
%   conversion routines DKL2RGB or RGB2DKL.
%   See also DKL2RGB, RGB2DKL.
% INPUT
%   INITDATA inputs the 3x3 matrix of xyY values for each phosphor. 
%   format:
%       rx ry rY
%       gx gy gY
%       bx by bY
%   May be specified in 2 ways:
%   a.) As the 3x3 matrix.
%   b.) As a filename for a file with the 3x3 matrix. 
%   DEFAULT (nargin==0): INITMON without arguments uses default xyY values
%   to initialize the conversion matrices.
% EXAMPLE
%   Run without input.
% GENEALOGY 
%   2004 Thorsten Hansen.
%   2009mar17 enable INPUT of xyYmon as 3x3 matrix; tidied up; removed
%   colormap for LUTs (no use?) [cw]. 
%   2009jun23 added default for "isempty(INITDATA)". [cw]

% define xyY monitor coordinates
if nargin == 0 | isempty(INITDATA) % use default calibration files from a sample monitor
  moncie = srgb;
  if msg
      disp('Initialize conversion matrices from default values.');
  end
else
  if ischar(INITDATA)
      moncie = textread(INITDATA); % Original (th) method.      
      if msg
        disp(['Initialize conversion matrices from ''' INITDATA '''.']);
      end
  elseif isnumeric(INITDATA) % New (cw) Method.
      moncie = INITDATA;
      if msg
        disp(['Initialize conversion matrices from INPUT MATRIX.']);
      end
  end
  if sum(size(moncie) ~= [3 3])
    error('INPUT ERROR: INITDATA must be 3x3.')
  end
end


% initialize conversion matrices M_dkl2rgb and M_rgb2dkl 
% from monitor coordinates moncie
global M_dkl2rgb M_rgb2dkl


M_dkl2rgb = getdkl(moncie);
M_rgb2dkl = inv(M_dkl2rgb);

% initialize conversion matrices M_rgb2lms and M_lms2rgb
%
global M_rgb2lms M_lms2rgb

% TEST: new vectorized implementation
monxyY = moncie; 
x = monxyY(:,1); y = monxyY(:,2); Y = monxyY(:,3);

% xyY -> xyz conversion
if prod(y) == 0, error('y column contains zero value.'), end
z = 1-x-y;
monxyz = [x y z];

white = Y/2;

% xyY -> XYZ conversion
X = x./y.*Y;
Z = z./y.*Y;
monXYZ = [X Y Z]; % this should be monCIE
% end TEST

monCIE = zeros(3,3);
monCIE(:,2) = moncie(:,3);

for i=1:3
  moncie(i,3) = 1.0 - moncie(i,1) - moncie(i,2);
  monCIE(i,1) = (moncie(i,1)/moncie(i,2))*monCIE(i,2);
  monCIE(i,3) = (moncie(i,3)/moncie(i,2))*monCIE(i,2);
  monRGB(i,1) = 0.15514 * monCIE(i,1) + ...
      0.54313 * monCIE(i,2) - 0.03386 * monCIE(i,3);
  monRGB(i,2) = -0.15514 * monCIE(i,1) + ...
      0.45684 * monCIE(i,2) + 0.03386 * monCIE(i,3);
  monRGB(i,3) = 0.01608 * monCIE(i,3);
  tsum = monRGB(i,1) + monRGB(i,2);
  monrgb(i,1) = monRGB(i,1) / tsum;
  monrgb(i,2) = monRGB(i,2) / tsum;
  monrgb(i,3) = monRGB(i,3) / tsum;
end

Xmon = monCIE; % who needs Xmon?

Xmat= inv(Xmon); % who needs Xmat?

M_rgb2lms = monRGB; % M_rgb2lms used in mon2cones
                    % why not directly compute on M_rgb2lms ?

M_lms2rgb = inv(M_rgb2lms);

% white point
%w = mon2cones(0.5, 0.5, 0.5);
w = [0.5 0.5 0.5] * M_rgb2lms; % who needs this?

%% M_dkl2rgb (determine global variable
function M_dkl2rgb = getdkl(monxyY) 
% compute dkl2rgb conversion matrix from moncie coordinates
% (compare function "getdkl" in color.c)

x = monxyY(:,1); y = monxyY(:,2); Y = monxyY(:,3);
if prod(y) == 0, error('y column contains zero value.'), end
xyz = [x y 1-x-y];
white = Y/2;

% Smith & Pokorny cone fundamentals 
% V. C. Smith & J. Pokorny (1975), Vision Res. 15, 161-172.
%        X          Y       Z [cw] 
M = [ 0.15514  0.54312  -0.03286    % L alias R 
     -0.15514  0.45684   0.03286    % M alias G
      0.0      0.0       0.01608];  % S alias B

RGB = xyz*M'; % R, G  and B cones (i.e, long, middle and short wavelength)
% More precisely: RGB = excitation of the L, M and S-cones by the monitor
% primaries [cw]
RG_sum = RGB(:,1) + RGB(:,2); % R G sum (L+M)
R = RGB(:,1)./RG_sum;
B = RGB(:,3)./RG_sum; 
G = 1 - R;

% constant blue axis
a = white(1)*B(1);
b = white(1)*(R(1)+G(1));
c = B(2);
d = B(3);
e = R(2)+G(2);
f = R(3)+G(3);
dGcb = (a*f/d - b)/(c*f/d - e); % solve x
dBcb = (a*e/c - b)/(d*e/c - f); % solve y

% tritanopic confusion axis
a = white(3)*R(3); % L-Cone excitation of the luminance component of the blue primary
b = white(3)*G(3); % M-Cone excitation ~
c = R(1);
d = R(2);
e = G(1);
f = G(2);
dRtc = (a*f/d - b)/(c*f/d - e); % solve x
dGtc = (a*e/c - b)/(d*e/c - f); % solve y

IMAX = 1;
M_dkl2rgb = IMAX * [1        1         dRtc/white(1)
                    1  -dGcb/white(2)  dGtc/white(2)
                    1  -dBcb/white(3)     -1]; 

%% Lab2xyY
function [xyY, XYZ] = Lab2xyY(Lab, wp_xyY, dim)
%2013dec02 * [cw] 

if nargin < 3
    dim = 2;
end

wp_XYZ = xyY2XYZ(wp_xyY,2);

XYZ = Lab2XYZ(Lab, wp_XYZ, dim);

xyY = XYZ2xyY(XYZ, dim);

%% Lab2XYZ
function XYZ = Lab2XYZ(Lab, wp_XYZ, dim)
%2013dec02 * [cw] 
%2015.09.11 corrected bug in LAB2XYZ_f [cw]

if nargin < 3
    dim = 2;
end

if dim == 2
    L = Lab(:,1);
    a = Lab(:,2);
    b = Lab(:,3);
elseif dim == 3
    L = Lab(:,:,1);
    a = Lab(:,:,2);
    b = Lab(:,:,3);
end


tt0 = (1/116)*(L+16);
Y = LAB2XYZ_f(tt0, wp_XYZ(2));
X = LAB2XYZ_f(tt0+(1/500)*a, wp_XYZ(1));
Z = LAB2XYZ_f(tt0-(1/200)*b, wp_XYZ(3));

if dim == 2
    XYZ = [X Y Z];
elseif dim == 3
    XYZ = cat(3, X, Y, Z);    
end

%% LAB2XYZ_f
function X = LAB2XYZ_f(tt, Xn)
% Function for XYZ2LAB
aa = 3*(6/29)^2;
t0 = 6/29;

inds = tt > t0;
qX = tt.^3;
qX2 = aa.*(tt-(4/29));
qX(~inds) = qX2(~inds);

X = Xn * qX;


%% XYZ2LAB_f
function qX = XYZ2Lab_f(X, Xn)
% Function for XYZ2LAB
aa = (1/3)*(6/29)^-2;
t0 = (6/29)^3;
tt = (X./Xn);

inds = tt > t0;
qX = tt.^(1/3);
qX2 = aa.*tt+(4/29);
qX(~inds) = qX2(~inds);

%% Luv2xyY
function [xyY, XYZ] = Luv2xyY(Luv, xyYn_or_XYZn, wp_mode, dim)

% ___OBJECTIVE________________________________________________________________
% Converts L*u*v* values into CIE1931 chromaticity values (xyY) and
% tristimulus values (XYZ) values.
% Formulas from: http://en.wikipedia.org/wiki/CIELUV
% ___INPUT____________________________________________________________________
% Luv = May be enter in two ways:
% a.) Matrix with 3 columns, each containing L*, u* and v*, respectively
% (image_mode = 0); 
% b.) Image with 3 layers, each consisting of a matrix with L*, u* and
%     v*, respectively (image_mode = 1).
% xyYn_or_XYZn = Whitepoint, either specified as CIE1931 xyY-values
% (default) or XYZ values (s. wp_mode).
% wp_mode = foramt of the white_point, namely either 'xyY' (default) or
% 'XYZ'. 
% ___GENEALOGY________________________________________________________________
% 2011mar08 [cw]
% 2012nov16 corrected bug in if-statement by using indices [cw]

if nargin < 4
    dim = 2;
    if nargin < 3
        % wp_mode
        wp_mode = 'xyY';
    end
end

% image mode (or not):
if dim == 2
        image_mode = 0;
        L = Luv(:,1); u = Luv(:,2); v = Luv(:,3);
elseif dim == 3
        image_mode = 1;
        L = Luv(:,:,1); u = Luv(:,:,2); v = Luv(:,:,3);
end

% WP
switch wp_mode
    case 'xyY'
        xn = xyYn_or_XYZn(:,1);
        yn = xyYn_or_XYZn(:,2);
        Yn = xyYn_or_XYZn(:,3);
        uprimen = (4 * xn)./(-2*xn + 12*yn + 3);
        vprimen = (9 * yn)./(-2*xn + 12*yn + 3);
    case 'XYZ'
        Xn = xyYn_or_XYZn(:,1);
        Yn = xyYn_or_XYZn(:,2);
        Zn = xyYn_or_XYZn(:,3);
        uprimen = (4 * Xn)./(Xn + 15 * Yn + 3 * Zn);
        vprimen = (9 * Yn)./(Xn + 15 * Yn + 3 * Zn);
    otherwise
        error('INPUT: wp_mode does not exist');
end


% uv2uv_
u_ = u./(13*L) + uprimen;
v_ = v./(13*L) + vprimen;


% uv_2xyY
x = (9 * u_)./(6*u_ - 16*v_ + 12);
y = (4 * v_)./(6*u_ - 16*v_ + 12);
% if L <= 8
%     Y = Yn * L * (3/29).^3;
% else
%     Y = Yn * ((L+16)/116).^3;
% end
Y = Yn * ((L+16)/116).^3;
Y2 = Yn * L * (3/29).^3;
inds = L<=8;
Y(inds) = Y2(inds);

if image_mode
    xyY = cat(3, x, y, Y);
else
    xyY = [x y Y];
end

% uv_2XYZ
if nargout > 1
    X = Y .* ((9*u_) ./ (4*v_));
    Z = Y .* (12 - 3*u_ - 20*v_)./(4*v_);
    
    % To correct for formula error with black:
    inds = L == 0;
    X(inds) = 0; Z(inds) = 0;

    if image_mode        
        XYZ = cat(3, X, Y, Z);
    else
        XYZ = [X Y Z];
    end
end

%% red2deg
function [DEGREE] = rad2deg(RADIAN)

%**************************************************************************
% Program Description und Modifications  
%**************************************************************************
% Converts angles from radians into degrees within the interval [0, 360];
% INPUT:  Angles in radian.
% OUTPUT: Angles in degress between 0 and 360 degrees.

%**************************************************************************
% Main Program  
%**************************************************************************

% 1. Map angles to to 0:2*pi ----------------------------------------------
twopi = 2*pi;
n = floor(RADIAN/twopi); RADIAN = RADIAN-n*twopi;

% 2. Convert into degrees
DEGREE = RADIAN * 180/ pi; % i.e. RADIAN * 360/ 2*pi ----------------------

%% rgb2dkl
function dkl = rgb2dkl(r, g, b)
%RGB2DKL  Convert RGB to cartesian DKL coordinates.
%   DKL = RGB2DKL(R, G, B) for scalar values R, G and B converts
%      the RGB triplet into cartesian DKL coordinates, where 
%      DKL(1) : luminance (L+M) axis, 
%      DKL(2) : constant blue (L-M) axis
%      DKL(3) : tritanopic confusion (S) axis
%
%RGB values should be between 0 and 1; output is given between -1 and 1.
%
%   DKL = RGB2DKL(I) for RGB color image I, converts each color value in
%      I into the cartesian DKL coordinates.
%
%   Function INITMON must be called once prior to RGB2DKL.
%
%   See also DKL2RGB, INITMON.
%  
% 2005feb15 [th].
% 2009apr24 commented mapping to [-1,1], which seems to be detrimental or
% at least redundant. [cw] 
% 2012dec25 added vector processig [cw]

global M_rgb2dkl

if prod(size(M_rgb2dkl)) == 0
  error('Initialize conversion matrices by INITMON.')
end

if nargin == 1 & ndims(r) == 3 % input is RGB color image
    I = r;
    r = I(:,:,1);
    g = I(:,:,2);
    b = I(:,:,3);
end

if size(r,1) == 1 & size(r,2) == 1 % single value
  %disp('single value')
  dkl = M_rgb2dkl*(2*([r;g;b]-0.5));
elseif size(r,1) >= 1 & size(r,2) == 1 % several values (new: 2012dec25)
  dkl = M_rgb2dkl*(2*([r';g';b']-0.5));
elseif ndims(I) == 3
  [s1 s2 thirdD] = size(I);
  dkl = reshape((M_rgb2dkl*(2*(reshape(I,s1*s2,thirdD)-0.5))')',s1,s2,thirdD);
else
  error('Dimension to large.')
end

% %I guess this should be 1
% check_range = 1;
% if check_range
%   ind = find(dkl < -1);
%   if ~isempty(ind)
%     warning('color smallter than -1 values mapped to -1.')
%     dkl(ind) = -1;
%   end
%   
%   ind = find(dkl > 1);
%   if ~isempty(ind)
%     warning('color values greater 1 mapped to 1.')
%     dkl(ind) = 1;
%   end
% end

%% rgb2XYZ
function XYZ = rgb2XYZ(rgb, xyYmon, dim, mon_kwY)

%FUNCTION XYZ=RGB2XYZ(RGB)
%
%Calculates CIE XYZ Judd-Vos (oder andere)
%revised tristimulus values from monitor specific rgb values. Expects there
%to be a textfile with a 3*3 matrix of the Judd-Vos chromaticity
%coordinates of the monitor phosphors (x_red y_red Y_red; x_green y_green
%Y_green; x_blue y_blue Y_blue), which is loaded into variable p_xyY. 
%
%Input: an n*3 matrix with non-gammacorrected rgb values in columns 
%Output: a n*3 matrix XYZ values in rows
%
% REQUIREMENTS:
% xyY2XYZ.m
%
% GENEALOGY ***************************************************************
% 4.6.2006 mo 
% 2007 Jun 25 cw modified output
%   2010apr21 modified the automatic scaling: >2 instead of >1. [cw]
% 2018.03.29 black luminance correction added [cw]

if nargin < 4
    mon_kwY = [];
    if nargin < 3
        dim = 2;
    end
end

%replace this with the file with the xyY coordinates of your monitor
%p_xyY = load('sony2006.xyY');
xyYmon = xyYmon(1:3,1:3);
XYZmon = xyY2XYZ(xyYmon);

%scale the rgb values to the range [0 1]
if ~isempty(find(rgb > 2))
    rgb = rgb/255;
    warning('There are RGBs > 2; hence they were divided by 255');
end


%XYZ= p_XYZ' * rgb;
if dim == 2
    XYZ= rgb * XYZmon;
elseif dim == 3
    for dm = 1:3
        for nr = 1:3
            XYZ(:,:,nr,dm) = rgb(:,:,dm) * XYZmon(dm,nr);
        end
    end
    XYZ = sum(XYZ,4);
end

% BLACK LUMINANCE CORRECTION (intercept) ----------------------------------
if ~isempty(mon_kwY)
    xyY = XYZ2xyY(XYZ,dim);
    if dim == 2
       xyY(:,3) = xyY(:,3) + mon_kwY(1);
    else
       xyY(:,:,3) = xyY(:,:,3) + mon_kwY(1);
    end
    XYZ = xyY2XYZ(xyY, dim);
%    fprintf('KY3: Black luminance added on xyY (step 3/3)\n');
end
%% sample_spectra
function spectra = sample_spectra 
spectra = [380,0,0,0,0;384,0,0,0,0;388,0,0,0,0;392,0,0,0.0001,0.0001;396,0,0,0.0001,0.0001;400,0,0,0.0001,0.0001;404,0,0,0.0002,0.0002;408,0,0,0.0002,0.0002;412,0,0,0.0003,0.0003;416,0,0,0.0004,0.0004];

%% srgb
function [mon_xyY, mon_ldt] = srgb
mon_ldt = [...
    0,0.077399,0.154799,0.232198,0.309598,0.386997,0.464396,0.541796,0.619195,0.696594,0.773994,0.853367,0.937509,1.026303,1.119818,1.218123,1.321287,1.429375,1.542452,1.660583,1.78383,1.912253,2.045914,2.184872,2.329185,2.47891,2.634105,2.794824,2.961123,3.133055,3.310673,3.494031,3.68318,3.878171,4.079055,4.285881,4.498698,4.717556,4.942502,5.173584,5.410848,5.654341,5.904108,6.160196,6.422649,6.691512,6.966827,7.24864,7.536993,7.831928,8.133488,8.441715,8.756651,9.078335,9.40681,9.742115,10.08429,10.4333750000000,10.78941,11.1524320000000,11.5224820000000,11.8995970000000,12.2838150000000,12.6751740000000,13.0737120000000,13.4794650000000,13.89247,14.3127650000000,14.7403850000000,15.1753660000000,15.6177440000000,16.0675550000000,16.5248330000000,16.9896140000000,17.4619330000000,17.9418240000000,18.4293220000000,18.92446,19.4272720000000,19.9377930000000,20.4560540000000,20.98209,21.5159340000000,22.0576180000000,22.6071750000000,23.1646360000000,23.7300360000000,24.3034040000000,24.8847740000000,25.4741760000000,26.0716420000000,26.6772030000000,27.2908910000000,27.9127360000000,28.5427690000000,29.18102,29.82752,30.4822990000000,31.1453870000000,31.8168130000000,32.4966090000000,33.1848020000000,33.8814220000000,34.5864990000000,35.3000620000000,36.0221390000000,36.75276,37.4919530000000,38.2397460000000,38.9961690000000,39.7612480000000,40.5350130000000,41.3174910000000,42.10871,42.9086970000000,43.7174810000000,44.5350880000000,45.3615460000000,46.1968820000000,47.0411240000000,47.8942970000000,48.7564290000000,49.6275470000000,50.5076760000000,51.3968450000000,52.2950780000000,53.2024020000000,54.1188430000000,55.0444280000000,55.9791810000000,56.9231290000000,57.8762980000000,58.8387120000000,59.8103980000000,60.7913810000000,61.7816860000000,62.7813380000000,63.7903630000000,64.8087840000000,65.8366270000000,66.8739180000000,67.9206790000000,68.9769370000000,70.0427150000000,71.1180370000000,72.2029290000000,73.2974140000000,74.4015160000000,75.5152590000000,76.6386680000000,77.7717650000000,78.9145750000000,80.0671220000000,81.2294280000000,82.4015180000000,83.5834150000000,84.7751420000000,85.9767220000000,87.1881780000000,88.4095340000000,89.6408130000000,90.8820370000000,92.1332290000000,93.3944120000000,94.6656090000000,95.9468410000000,97.2381330000000,98.5395060000000,99.8509820000000,101.172584000000,102.504334000000,103.846254000000,105.198366000000,106.560693000000,107.933256000000,109.316077000000,110.709177000000,112.112579000000,113.526305000000,114.950375000000,116.384811000000,117.829635000000,119.284868000000,120.750532000000,122.226647000000,123.713235000000,125.210317000000,126.717914000000,128.236047000000,129.764737000000,131.304005000000,132.853871000000,134.414357000000,135.985483000000,137.567270000000,139.159738000000,140.762907000000,142.376799000000,144.001434000000,145.636832000000,147.283012000000,148.939997000000,150.607804000000,152.286456000000,153.975971000000,155.676371000000,157.387673000000,159.1099,160.843070000000,162.587203000000,164.342319000000,166.108438000000,167.885578000000,169.673761000000,171.473005000000,173.283330000000,175.104755000000,176.937299000000,178.780982000000,180.635824000000,182.501843000000,184.379058000000,186.267489000000,188.167154000000,190.078073000000,192.000265000000,193.933749000000,195.878543000000,197.834666000000,199.802137000000,201.780975000000,203.771198000000,205.772826000000,207.785876000000,209.810367000000,211.846319000000,213.893748000000,215.952674000000,218.023115000000,220.105089000000,222.198615000000,224.303711000000,226.420395000000,228.548685000000,230.688599000000,232.840156000000,235.003373000000,237.178269000000,239.364861000000,241.563167000000,243.773205000000,245.994993000000,248.228549000000,250.473890000000,252.731035000000,255;...
    0,0.077399,0.154799,0.232198,0.309598,0.386997,0.464396,0.541796,0.619195,0.696594,0.773994,0.853367,0.937509,1.026303,1.119818,1.218123,1.321287,1.429375,1.542452,1.660583,1.78383,1.912253,2.045914,2.184872,2.329185,2.47891,2.634105,2.794824,2.961123,3.133055,3.310673,3.494031,3.68318,3.878171,4.079055,4.285881,4.498698,4.717556,4.942502,5.173584,5.410848,5.654341,5.904108,6.160196,6.422649,6.691512,6.966827,7.24864,7.536993,7.831928,8.133488,8.441715,8.756651,9.078335,9.40681,9.742115,10.08429,10.4333750000000,10.78941,11.1524320000000,11.5224820000000,11.8995970000000,12.2838150000000,12.6751740000000,13.0737120000000,13.4794650000000,13.89247,14.3127650000000,14.7403850000000,15.1753660000000,15.6177440000000,16.0675550000000,16.5248330000000,16.9896140000000,17.4619330000000,17.9418240000000,18.4293220000000,18.92446,19.4272720000000,19.9377930000000,20.4560540000000,20.98209,21.5159340000000,22.0576180000000,22.6071750000000,23.1646360000000,23.7300360000000,24.3034040000000,24.8847740000000,25.4741760000000,26.0716420000000,26.6772030000000,27.2908910000000,27.9127360000000,28.5427690000000,29.18102,29.82752,30.4822990000000,31.1453870000000,31.8168130000000,32.4966090000000,33.1848020000000,33.8814220000000,34.5864990000000,35.3000620000000,36.0221390000000,36.75276,37.4919530000000,38.2397460000000,38.9961690000000,39.7612480000000,40.5350130000000,41.3174910000000,42.10871,42.9086970000000,43.7174810000000,44.5350880000000,45.3615460000000,46.1968820000000,47.0411240000000,47.8942970000000,48.7564290000000,49.6275470000000,50.5076760000000,51.3968450000000,52.2950780000000,53.2024020000000,54.1188430000000,55.0444280000000,55.9791810000000,56.9231290000000,57.8762980000000,58.8387120000000,59.8103980000000,60.7913810000000,61.7816860000000,62.7813380000000,63.7903630000000,64.8087840000000,65.8366270000000,66.8739180000000,67.9206790000000,68.9769370000000,70.0427150000000,71.1180370000000,72.2029290000000,73.2974140000000,74.4015160000000,75.5152590000000,76.6386680000000,77.7717650000000,78.9145750000000,80.0671220000000,81.2294280000000,82.4015180000000,83.5834150000000,84.7751420000000,85.9767220000000,87.1881780000000,88.4095340000000,89.6408130000000,90.8820370000000,92.1332290000000,93.3944120000000,94.6656090000000,95.9468410000000,97.2381330000000,98.5395060000000,99.8509820000000,101.172584000000,102.504334000000,103.846254000000,105.198366000000,106.560693000000,107.933256000000,109.316077000000,110.709177000000,112.112579000000,113.526305000000,114.950375000000,116.384811000000,117.829635000000,119.284868000000,120.750532000000,122.226647000000,123.713235000000,125.210317000000,126.717914000000,128.236047000000,129.764737000000,131.304005000000,132.853871000000,134.414357000000,135.985483000000,137.567270000000,139.159738000000,140.762907000000,142.376799000000,144.001434000000,145.636832000000,147.283012000000,148.939997000000,150.607804000000,152.286456000000,153.975971000000,155.676371000000,157.387673000000,159.1099,160.843070000000,162.587203000000,164.342319000000,166.108438000000,167.885578000000,169.673761000000,171.473005000000,173.283330000000,175.104755000000,176.937299000000,178.780982000000,180.635824000000,182.501843000000,184.379058000000,186.267489000000,188.167154000000,190.078073000000,192.000265000000,193.933749000000,195.878543000000,197.834666000000,199.802137000000,201.780975000000,203.771198000000,205.772826000000,207.785876000000,209.810367000000,211.846319000000,213.893748000000,215.952674000000,218.023115000000,220.105089000000,222.198615000000,224.303711000000,226.420395000000,228.548685000000,230.688599000000,232.840156000000,235.003373000000,237.178269000000,239.364861000000,241.563167000000,243.773205000000,245.994993000000,248.228549000000,250.473890000000,252.731035000000,255;...
    0,0.077399,0.154799,0.232198,0.309598,0.386997,0.464396,0.541796,0.619195,0.696594,0.773994,0.853367,0.937509,1.026303,1.119818,1.218123,1.321287,1.429375,1.542452,1.660583,1.78383,1.912253,2.045914,2.184872,2.329185,2.47891,2.634105,2.794824,2.961123,3.133055,3.310673,3.494031,3.68318,3.878171,4.079055,4.285881,4.498698,4.717556,4.942502,5.173584,5.410848,5.654341,5.904108,6.160196,6.422649,6.691512,6.966827,7.24864,7.536993,7.831928,8.133488,8.441715,8.756651,9.078335,9.40681,9.742115,10.08429,10.4333750000000,10.78941,11.1524320000000,11.5224820000000,11.8995970000000,12.2838150000000,12.6751740000000,13.0737120000000,13.4794650000000,13.89247,14.3127650000000,14.7403850000000,15.1753660000000,15.6177440000000,16.0675550000000,16.5248330000000,16.9896140000000,17.4619330000000,17.9418240000000,18.4293220000000,18.92446,19.4272720000000,19.9377930000000,20.4560540000000,20.98209,21.5159340000000,22.0576180000000,22.6071750000000,23.1646360000000,23.7300360000000,24.3034040000000,24.8847740000000,25.4741760000000,26.0716420000000,26.6772030000000,27.2908910000000,27.9127360000000,28.5427690000000,29.18102,29.82752,30.4822990000000,31.1453870000000,31.8168130000000,32.4966090000000,33.1848020000000,33.8814220000000,34.5864990000000,35.3000620000000,36.0221390000000,36.75276,37.4919530000000,38.2397460000000,38.9961690000000,39.7612480000000,40.5350130000000,41.3174910000000,42.10871,42.9086970000000,43.7174810000000,44.5350880000000,45.3615460000000,46.1968820000000,47.0411240000000,47.8942970000000,48.7564290000000,49.6275470000000,50.5076760000000,51.3968450000000,52.2950780000000,53.2024020000000,54.1188430000000,55.0444280000000,55.9791810000000,56.9231290000000,57.8762980000000,58.8387120000000,59.8103980000000,60.7913810000000,61.7816860000000,62.7813380000000,63.7903630000000,64.8087840000000,65.8366270000000,66.8739180000000,67.9206790000000,68.9769370000000,70.0427150000000,71.1180370000000,72.2029290000000,73.2974140000000,74.4015160000000,75.5152590000000,76.6386680000000,77.7717650000000,78.9145750000000,80.0671220000000,81.2294280000000,82.4015180000000,83.5834150000000,84.7751420000000,85.9767220000000,87.1881780000000,88.4095340000000,89.6408130000000,90.8820370000000,92.1332290000000,93.3944120000000,94.6656090000000,95.9468410000000,97.2381330000000,98.5395060000000,99.8509820000000,101.172584000000,102.504334000000,103.846254000000,105.198366000000,106.560693000000,107.933256000000,109.316077000000,110.709177000000,112.112579000000,113.526305000000,114.950375000000,116.384811000000,117.829635000000,119.284868000000,120.750532000000,122.226647000000,123.713235000000,125.210317000000,126.717914000000,128.236047000000,129.764737000000,131.304005000000,132.853871000000,134.414357000000,135.985483000000,137.567270000000,139.159738000000,140.762907000000,142.376799000000,144.001434000000,145.636832000000,147.283012000000,148.939997000000,150.607804000000,152.286456000000,153.975971000000,155.676371000000,157.387673000000,159.1099,160.843070000000,162.587203000000,164.342319000000,166.108438000000,167.885578000000,169.673761000000,171.473005000000,173.283330000000,175.104755000000,176.937299000000,178.780982000000,180.635824000000,182.501843000000,184.379058000000,186.267489000000,188.167154000000,190.078073000000,192.000265000000,193.933749000000,195.878543000000,197.834666000000,199.802137000000,201.780975000000,203.771198000000,205.772826000000,207.785876000000,209.810367000000,211.846319000000,213.893748000000,215.952674000000,218.023115000000,220.105089000000,222.198615000000,224.303711000000,226.420395000000,228.548685000000,230.688599000000,232.840156000000,235.003373000000,237.178269000000,239.364861000000,241.563167000000,243.773205000000,245.994993000000,248.228549000000,250.473890000000,252.731035000000,255]';

mon_xyY = [...
    0.64,0.33,17;...
    0.30,0.60,57.2;...
    0.15,0.060,5.8;...
    0.3127,0.329,80];

%% XYZ2lms
function lms = XYZ2lms(XYZ, fndmtls, cmf)
% Calculates cone excitations (LMS) based on Tristimulus Values (XYZ).
% Conversion matrices from CIE1931 XYZ taken from:
% Golz, J., & MacLeod, D. I. A. (2003). Colorimetry for CRT displays. J Opt Soc Am A Opt Image Sci Vis, 20(5), 769-781. 
% 2014dec14 * [cw]
% NOT TESTED YET!!!!!

if nargin < 3
    cmf = 'judd';
    if nargin < 2
        fndmtls = 'smithpokorny';
    end
end

M = coneconversionmatrix(fndmtls, cmf);
lms = XYZ*M';

function M = coneconversionmatrix(msrments, cmf)
M = [];
% Conversion matrices towards CIE1931 XYZ taken from:
% Golz, J., & MacLeod, D. I. A. (2003). Colorimetry for CRT displays. J Opt Soc Am A Opt Image Sci Vis, 20(5), 769-781. 

switch lower(msrments)
    case {'smithpokorny', 'sp'}
        % V. C. Smith and J. Pokorny, ��Spectral sensitivity of the
        % foveal cone photopigments between 400 and 500 nm,�� Vision
        % Res. 15, 161�171 (1975).
        switch lower(cmf)
            case '1931'
                M = [0.15282  0.54383 -0.02795;...
                    -0.15254  0.45524  0.03355;...
                    -0.00045  0.00145  0.95449];
                
            case 'judd'
                % Smith & Pokorny cone fundamentals
                % V. C. Smith & J. Pokorny (1975), Vision Res. 15, 161-172.
                %        X          Y       Z [cw]
                M = [ 0.15514  0.54312  -0.03286    % L alias R
                     -0.15514  0.45684   0.03286    % M alias G
                      0.0      0.0       0.01608];  % S alias B
        end
    case 'smj2'
        % A. Stockman, D. I. A. MacLeod, and N. E. Johnson, ��Spectral
        % sensitivities of the human cones,�� J. Opt. Soc. Am. A 10,
        % 2491�2521 (1993).
        switch lower(cmf)
            case '1931'
                M = [ 0.18772  0.60445 -0.02517;...
                     -0.14014  0.43056  0.03773;...
                      0.02017 -0.04189  1.08472];
        end
    case 'smj10'
        % A. Stockman, D. I. A. MacLeod, and N. E. Johnson, ��Spectral
        % sensitivities of the human cones,�� J. Opt. Soc. Am. A 10,
        % 2491�2521 (1993).
        switch lower(cmf)
            case '1931'
                M = [ 0.14460  0.62421 -0.00429;...
                     -0.14506  0.42265  0.05084;...
                      0.03105 -0.06416  1.10923];
        end
    case {'stockmansharpe', 'ss2000', 'ss'}
        % A. Stockman and L. T. Sharpe, ��Spectral sensitivities of the
        % middle- and long-wavelength sensitive cones derived from
        % measurements in observers of known genotype,�� Vision Res.
        % 40, 1711�1737 (2000).
        switch lower(cmf)
            case '1931'
                M = [ 0.17156  0.52901 -0.02199;...
                     -0.15955  0.48553  0.04298;...
                      0.01916 -0.03989  1.03993];
        end
end

if isempty(M)
    error('This transformation matrix is not implemented');
end

%% xyY2Lab
function Lab = xyY2Lab(xyY, wp_xyY, dim)
% 2013dec02 * [cw]
% 2014oct14 added default if nargin < 2 [cw]

if nargin < 3
    dim = 2;
end

XYZ = xyY2XYZ(xyY, dim);
wp_XYZ = xyY2XYZ(wp_xyY, 2);
Lab = XYZ2Lab(XYZ, wp_XYZ, dim);

%% XYZ2Lab
function Lab = XYZ2Lab(XYZ, wp_XYZ, dim)
% 2013dec02 made mg's function work with matrices and diff. dim as in rgb converter [cw]

if nargin < 3
    dim = 2;
end

if dim == 2
    X = XYZ(:,1);
    Y = XYZ(:,2);
    Z = XYZ(:,3);
elseif dim == 3
    X = XYZ(:,:,1);
    Y = XYZ(:,:,2);
    Z = XYZ(:,:,3);
end

XXn = XYZ2Lab_f(X, wp_XYZ(1));
YYn = XYZ2Lab_f(Y, wp_XYZ(2));
ZZn = XYZ2Lab_f(Z, wp_XYZ(3));

% L*, a*, and b* ----------------------------------------------------------
L = 116 .* YYn - 16;
a = 500 .* (XXn - YYn);
b = 200 .* (YYn - ZZn);

% CORRECT FOR BLACK -------------------------------------------------------
inds = XYZ(:,2) == 0; % Because of division by L
L(inds) = 0;
a(inds) = 0;
b(inds) = 0;

if dim == 2
    Lab = [L a b];
elseif dim == 3
    Lab = cat(3, L, a, b);    
end

%% xyY2Luv
function Luv = xyY2Luv(xyY, xyY_bg, dim)
%   2012aug06 [cw]

if nargin < 3
    dim = 2;
end

XYZ = xyY2XYZ(xyY, dim);
XYZ_bg = xyY2XYZ(xyY_bg, 2);

Luv = XYZ2Luv(XYZ, XYZ_bg, dim);

%% XYZ2Luv
function LUV = XYZ2Luv(XYZ, XYZ_bg, dim)
% 2012jan20 added option dim for image conversion; corrected bug in
% if-statement by using indices [cw]
% 2016.07.01 corrected for black: if L == 0...

if nargin < 3
    dim = 2;
end

% Whitepoint:
Xn = XYZ_bg(1);
Yn = XYZ_bg(2);
Zn = XYZ_bg(3);


if dim == 2
    X = XYZ(:,1);
    Y = XYZ(:,2);
    Z = XYZ(:,3);
elseif dim == 3
    X = XYZ(:,:,1);
    Y = XYZ(:,:,2);
    Z = XYZ(:,:,3);
end


uprime = (4 * X)./(X + 15 * Y + 3 * Z);
vprime = (9 * Y)./(X + 15 * Y + 3 * Z);
uprimen = (4 * Xn)./(Xn + 15 * Yn + 3 * Zn);
vprimen = (9 * Yn)./(Xn + 15 * Yn + 3 * Zn); 

% old
% if Y/Yn > (6/29)^3
%     L1 = 116 * (Y/Yn).^(1/3) - 16;
% else
%     L2 = ((29/3)^3) * (Y/Yn);
% end

L = 116 * (Y/Yn).^(1/3) - 16;
L2 = ((29/3)^3) * (Y/Yn);
inds = Y/Yn > (6/29)^3;
L(~inds) = L2(~inds);

u = (13*L) .* (uprime - uprimen);
v = (13*L) .* (vprime - vprimen);

% CORRECT FOR BLACK -------------------------------------------------------
inds = L == 0;
u(inds) = 0;
v(inds) = 0;

if dim == 2
    LUV = [L u v];
elseif dim == 3
    LUV = cat(3, L, u, v);    
end

%% xyY2XYZ
function XYZ = xyY2XYZ(xyY, dim)
% 2012jan20 added dim to enable image input [cw]
% 2018.07.23 correction for xyY NaNs when black (Y = 0) [cw]

if nargin < 2
    dim = 2;
end

if dim == 2
    x = xyY(:,1); y = xyY(:,2); Y = xyY(:,3);
elseif dim == 3
    x = xyY(:,:,1); y = xyY(:,:,2); Y = xyY(:,:,3); 
end

X = (Y./y) .* x;
Y = Y;
Z = (Y./y) .* (1-y-x);

if dim == 2
    XYZ = [X Y Z];
    inds = XYZ(:,2) == 0;
    XYZ(inds,:) = 0;
elseif dim == 3
    inds = Y == 0;
    X(inds) = 0; Z(inds) = 0;
    XYZ = cat(3, X, Y, Z);    
end

%% XYZ2rgb
function [R_or_RGB, G, B] = XYZ2rgb(X_or_XYZ, Y_or_xyYmon, Z, xyYmon, rgbmax)

% OBJECTIVE ---------------------------------------------------------------
%   Calculates rgb values from CIE XYZ tristimulus values.
% INPUT -------------------------------------------------------------------
%   There are 2 input modes: 
%   a.) Vectors: X,Y, & Z values are entered as one matrix composed by three
%   corresponding vectors; in this case there are 2 inputs:
%   X_or_XYZ = Tristimulus values as column vectors in one matricex.
%   Y_or_xyYmon = chromaticity values (x, y & Y) for each primary (R, G, & B) of
%   a particular monitor. 
%   b.) Matrices: X,Y, & Z values are entered as separate matrices, such as
%   image layers; in this case there are 4 inputs:  
%   X_or_XYZ, Y_or_xyYmon, & Z = Tristimulus values in matrices.
%   xyYmon = chromaticity values (x, y & Y) for each primary (R, G, & B) of
%   a particular monitor.
% OUTPUT ------------------------------------------------------------------
%   The input modes determine corresponding output modes: 
%   a.) R_or_RGB = RGB values as column vectors in one matrix.
%   b.) R_or_RGB, G, B = RGB values in separate matrices, such as for
%   bitmap image layers.
%   NOTE: RGBs must be rounded; if necessary, RGBs must be gamma corrected.
% EXAMPLE -----------------------------------------------------------------
%   NOTE: Run function without input to get illustration for the format of
%   xyYmon.
%   a.) RGB = XYZ2rgb(XYZ, xyYmon)
%   b.) [RGB(:,:,1), RGB(:,:,2), RGB(:,:,3)] = 
%           XYZ2rgb(XYZ(:,:,1), XYZ(:,:,2), XYZ(:,:,3), xyYmon);
% GENEALOGY ---------------------------------------------------------------
%   2006 created [mo].
%   2007mai2 inserted xyYmon as input variable [cw]. 
%   2009feb13-14 Added xyY2XYZ as a subfunction, enabled input & output for
%   matrices [cw]. 
%   2014mar04 solution without inverse for nargin == 2 [cw].
%   2017.12.20 added input rgbmax for 10bit [cw].

if nargin < 5
    rgbmax = 255;
    if nargin < 2
        xyYmon = srgb;
        if nargin < 1;
            show_input_structure; % subfunction, s. below.
            return;
        end
    end
end

if nargin == 2 % Vector mode
    XYZ = X_or_XYZ;
    xyYmon = Y_or_xyYmon;
    %the coordinates have to be translated to tristimulus values
    [XYZmon] = xyY2XYZ(xyYmon);
%    rgb = ((inv(XYZmon')*XYZ')*rgbmax)';
    rgb = ((XYZmon'\XYZ')*rgbmax)';
    %warning in case values are outside the gamut
     if  ~isempty(find(rgb < 0)) || ~isempty(find(rgb > rgbmax))  
        warning('xyY values outside display gamut')
     end
     R_or_RGB = rgb; % The output R_or_RGB contains the RGB-values.
elseif nargin >= 4 % Matrices mode
    X = X_or_XYZ; % Input X_or_XYZ contains the matrix with the X values. 
    Y = Y_or_xyYmon; % Input Y_or_xyYmon contains the matrix with the Y values.
    %the coordinates have to be translated to tristimulus values
    [XYZmon] = xyY2XYZ(xyYmon); 
    
    s_r = size(X,1);
    s_c = size(X,2);

    XYZ = [reshape(X, s_r*s_c, 1), reshape(Y, s_r*s_c, 1), reshape(Z, s_r*s_c, 1)];
    inverse = inv(XYZmon');
    RGB = ((inverse*XYZ')*rgbmax)';

    R_v = RGB(:,1);
    R = reshape(R_v, s_r,s_c);
    G_v = RGB(:,2);
    G = reshape(G_v, s_r,s_c);
    B_v = RGB(:,3);
    B = reshape(B_v, s_r,s_c);
    R_or_RGB = R; % The output R_or_RGB contains the matrix with R-values.

    %warning in case values are outside the gamut
    if  any((any(R<0)|any(R>rgbmax) | any(G<0)|any(G>rgbmax) | any(B<0)| any(B>rgbmax)))
%        warning('xyY values outside display gamut')
    end
else
    error('Check number of input & output!')
end

%% XZY2xyY
function [xyY, xyz] = XYZ2xyY(XYZ, dim)
%converts CIE XYZ values to xyY values (just a simple normalisation)
% 2012jan20 added dim to enable image input [cw]
% 2014feb10 added 2. output xyz

if nargin < 2
    dim = 2;
end


if dim == 2
    X = XYZ(:, 1);Y = XYZ(:,2); Z = XYZ(:, 3);
elseif dim == 3
    X = XYZ(:,:,1); Y = XYZ(:,:,2); Z = XYZ(:,:,3);
end

x = X./(X+Y+Z);
y = Y./(X+Y+Z);
z = Z./(X+Y+Z);

if dim == 2
    xyY = [x y Y];
    xyz = [x y z];
elseif dim == 3
    xyY = cat(3, x, y, Y);
    xyz = cat(3, x, y, z);
end